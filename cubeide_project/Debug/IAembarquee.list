
IAembarquee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082ac  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008468  08008468  00009468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084d8  080084d8  0000a00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080084d8  080084d8  000094d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084e0  080084e0  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084e0  080084e0  000094e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084e4  080084e4  000094e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080084e8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  2000000c  080084f4  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20040000  20040000  0000b000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4ce  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038de  00000000  00000000  0002750a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0002ade8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001353  00000000  00000000  0002c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034508  00000000  00000000  0002da0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6d2  00000000  00000000  00061f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001354ee  00000000  00000000  000815e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b6ad3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a48  00000000  00000000  001b6b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001bd560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008450 	.word	0x08008450

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08008450 	.word	0x08008450

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f001 f91b 	bl	8001766 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f819 	bl	8000566 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 faa2 	bl	8000a7c <MX_GPIO_Init>
  MX_FMC_Init();
 8000538:	f000 fa3a 	bl	80009b0 <MX_FMC_Init>
  MX_I2C1_Init();
 800053c:	f000 f866 	bl	800060c <MX_I2C1_Init>
  MX_SAI1_Init();
 8000540:	f000 f8a4 	bl	800068c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000544:	f000 f90a 	bl	800075c <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000548:	f000 f92e 	bl	80007a8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800054c:	f000 f96a 	bl	8000824 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000550:	f000 f9b4 	bl	80008bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000554:	f000 f9fe 	bl	8000954 <MX_USB_OTG_FS_PCD_Init>
  MX_X_CUBE_AI_Init();
 8000558:	f007 ff3f 	bl	80083da <MX_X_CUBE_AI_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 800055c:	f007 ff44 	bl	80083e8 <MX_X_CUBE_AI_Process>
 8000560:	2300      	movs	r3, #0
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}

08000566 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b096      	sub	sp, #88	@ 0x58
 800056a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2244      	movs	r2, #68	@ 0x44
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f007 ff3e 	bl	80083f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057a:	463b      	mov	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000588:	2000      	movs	r0, #0
 800058a:	f001 fe9b 	bl	80022c4 <HAL_PWREx_ControlVoltageScaling>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000594:	f000 fc90 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000598:	2330      	movs	r3, #48	@ 0x30
 800059a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a8:	2360      	movs	r3, #96	@ 0x60
 80005aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005b0:	2301      	movs	r3, #1
 80005b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005b8:	233c      	movs	r3, #60	@ 0x3c
 80005ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80005bc:	2305      	movs	r3, #5
 80005be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 ff3d 	bl	800244c <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x76>
  {
    Error_Handler();
 80005d8:	f000 fc6e 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2303      	movs	r3, #3
 80005e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	2105      	movs	r1, #5
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fb43 	bl	8002c80 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000600:	f000 fc5a 	bl	8000eb8 <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3758      	adds	r7, #88	@ 0x58
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000610:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <MX_I2C1_Init+0x74>)
 8000612:	4a1c      	ldr	r2, [pc, #112]	@ (8000684 <MX_I2C1_Init+0x78>)
 8000614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000616:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <MX_I2C1_Init+0x74>)
 8000618:	4a1b      	ldr	r2, [pc, #108]	@ (8000688 <MX_I2C1_Init+0x7c>)
 800061a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800061c:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <MX_I2C1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000622:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <MX_I2C1_Init+0x74>)
 8000624:	2201      	movs	r2, #1
 8000626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <MX_I2C1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <MX_I2C1_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_I2C1_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000640:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000646:	480e      	ldr	r0, [pc, #56]	@ (8000680 <MX_I2C1_Init+0x74>)
 8000648:	f001 fbb6 	bl	8001db8 <HAL_I2C_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000652:	f000 fc31 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000656:	2100      	movs	r1, #0
 8000658:	4809      	ldr	r0, [pc, #36]	@ (8000680 <MX_I2C1_Init+0x74>)
 800065a:	f001 fc48 	bl	8001eee <HAL_I2CEx_ConfigAnalogFilter>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000664:	f000 fc28 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000668:	2100      	movs	r1, #0
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_I2C1_Init+0x74>)
 800066c:	f001 fc8a 	bl	8001f84 <HAL_I2CEx_ConfigDigitalFilter>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000676:	f000 fc1f 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000028 	.word	0x20000028
 8000684:	40005400 	.word	0x40005400
 8000688:	307075b1 	.word	0x307075b1

0800068c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_Init 0 */
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */
  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000690:	4b2f      	ldr	r3, [pc, #188]	@ (8000750 <MX_SAI1_Init+0xc4>)
 8000692:	4a30      	ldr	r2, [pc, #192]	@ (8000754 <MX_SAI1_Init+0xc8>)
 8000694:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000696:	4b2e      	ldr	r3, [pc, #184]	@ (8000750 <MX_SAI1_Init+0xc4>)
 8000698:	2200      	movs	r2, #0
 800069a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800069c:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <MX_SAI1_Init+0xc4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80006a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006a4:	2240      	movs	r2, #64	@ 0x40
 80006a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80006a8:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80006ae:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80006b4:	4b26      	ldr	r3, [pc, #152]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80006ba:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80006c6:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006d4:	4a20      	ldr	r2, [pc, #128]	@ (8000758 <MX_SAI1_Init+0xcc>)
 80006d6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80006ea:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80006f0:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 80006f8:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <MX_SAI1_Init+0xc4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_SAI1_Init+0xc4>)
 8000700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000704:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_SAI1_Init+0xc4>)
 8000708:	2208      	movs	r2, #8
 800070a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_SAI1_Init+0xc4>)
 800070e:	2201      	movs	r2, #1
 8000710:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_SAI1_Init+0xc4>)
 8000714:	2200      	movs	r2, #0
 8000716:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <MX_SAI1_Init+0xc4>)
 800071a:	2200      	movs	r2, #0
 800071c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_SAI1_Init+0xc4>)
 8000720:	2200      	movs	r2, #0
 8000722:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <MX_SAI1_Init+0xc4>)
 8000726:	2200      	movs	r2, #0
 8000728:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_SAI1_Init+0xc4>)
 800072c:	2200      	movs	r2, #0
 800072e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_SAI1_Init+0xc4>)
 8000732:	2201      	movs	r2, #1
 8000734:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_SAI1_Init+0xc4>)
 8000738:	2200      	movs	r2, #0
 800073a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_SAI1_Init+0xc4>)
 800073e:	f004 fb03 	bl	8004d48 <HAL_SAI_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000748:	f000 fbb6 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000007c 	.word	0x2000007c
 8000754:	40015404 	.word	0x40015404
 8000758:	0002ee00 	.word	0x0002ee00

0800075c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_Init 0 */
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */
  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_SDMMC1_SD_Init+0x44>)
 8000762:	4a10      	ldr	r2, [pc, #64]	@ (80007a4 <MX_SDMMC1_SD_Init+0x48>)
 8000764:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_SDMMC1_SD_Init+0x44>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_SDMMC1_SD_Init+0x44>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_SDMMC1_SD_Init+0x44>)
 8000774:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000778:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_SDMMC1_SD_Init+0x44>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_SDMMC1_SD_Init+0x44>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_SDMMC1_SD_Init+0x44>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_SDMMC1_SD_Init+0x44>)
 800078e:	f004 fcf3 	bl	8005178 <HAL_SD_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000798:	f000 fb8e 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */
  /* USER CODE END SDMMC1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000110 	.word	0x20000110
 80007a4:	50062400 	.word	0x50062400

080007a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_SPI2_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000820 <MX_SPI2_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_SPI2_Init+0x74>)
 80007b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <MX_SPI2_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c0:	4b16      	ldr	r3, [pc, #88]	@ (800081c <MX_SPI2_Init+0x74>)
 80007c2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_SPI2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_SPI2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_SPI2_Init+0x74>)
 80007d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_SPI2_Init+0x74>)
 80007de:	2208      	movs	r2, #8
 80007e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_SPI2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_SPI2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_SPI2_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_SPI2_Init+0x74>)
 80007f6:	2207      	movs	r2, #7
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <MX_SPI2_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_SPI2_Init+0x74>)
 8000802:	2208      	movs	r2, #8
 8000804:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_SPI2_Init+0x74>)
 8000808:	f005 fdad 	bl	8006366 <HAL_SPI_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 fb51 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000190 	.word	0x20000190
 8000820:	40003800 	.word	0x40003800

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 800082a:	4a23      	ldr	r2, [pc, #140]	@ (80008b8 <MX_USART2_UART_Init+0x94>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086c:	4811      	ldr	r0, [pc, #68]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 800086e:	f005 fe65 	bl	800653c <HAL_UART_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000878:	f000 fb1e 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 8000880:	f006 fc00 	bl	8007084 <HAL_UARTEx_SetTxFifoThreshold>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800088a:	f000 fb15 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 8000892:	f006 fc35 	bl	8007100 <HAL_UARTEx_SetRxFifoThreshold>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800089c:	f000 fb0c 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_USART2_UART_Init+0x90>)
 80008a2:	f006 fbb6 	bl	8007012 <HAL_UARTEx_DisableFifoMode>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 fb04 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200001f4 	.word	0x200001f4
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c0:	4b22      	ldr	r3, [pc, #136]	@ (800094c <MX_USART3_UART_Init+0x90>)
 80008c2:	4a23      	ldr	r2, [pc, #140]	@ (8000950 <MX_USART3_UART_Init+0x94>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008c6:	4b21      	ldr	r3, [pc, #132]	@ (800094c <MX_USART3_UART_Init+0x90>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <MX_USART3_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_USART3_UART_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <MX_USART3_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_USART3_UART_Init+0x90>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b19      	ldr	r3, [pc, #100]	@ (800094c <MX_USART3_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b17      	ldr	r3, [pc, #92]	@ (800094c <MX_USART3_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USART3_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_USART3_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000904:	4811      	ldr	r0, [pc, #68]	@ (800094c <MX_USART3_UART_Init+0x90>)
 8000906:	f005 fe19 	bl	800653c <HAL_UART_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000910:	f000 fad2 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000914:	2100      	movs	r1, #0
 8000916:	480d      	ldr	r0, [pc, #52]	@ (800094c <MX_USART3_UART_Init+0x90>)
 8000918:	f006 fbb4 	bl	8007084 <HAL_UARTEx_SetTxFifoThreshold>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000922:	f000 fac9 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000926:	2100      	movs	r1, #0
 8000928:	4808      	ldr	r0, [pc, #32]	@ (800094c <MX_USART3_UART_Init+0x90>)
 800092a:	f006 fbe9 	bl	8007100 <HAL_UARTEx_SetRxFifoThreshold>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000934:	f000 fac0 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	@ (800094c <MX_USART3_UART_Init+0x90>)
 800093a:	f006 fb6a 	bl	8007012 <HAL_UARTEx_DisableFifoMode>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000944:	f000 fab8 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000288 	.word	0x20000288
 8000950:	40004800 	.word	0x40004800

08000954 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_OTG_FS_Init 0 */
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */
  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800095e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2206      	movs	r2, #6
 8000964:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2202      	movs	r2, #2
 800096a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2202      	movs	r2, #2
 8000970:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	f001 fb40 	bl	800201c <HAL_PCD_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009a2:	f000 fa89 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */
  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000031c 	.word	0x2000031c

080009b0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */
  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80009b6:	463b      	mov	r3, r7
 80009b8:	2220      	movs	r2, #32
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f007 fd1a 	bl	80083f6 <memset>
  /* USER CODE BEGIN FMC_Init 1 */
  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80009c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <MX_FMC_Init+0xc4>)
 80009c4:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80009c8:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80009ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <MX_FMC_Init+0xc4>)
 80009cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000a78 <MX_FMC_Init+0xc8>)
 80009ce:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80009d0:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <MX_FMC_Init+0xc4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80009d6:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <MX_FMC_Init+0xc4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80009dc:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <MX_FMC_Init+0xc4>)
 80009de:	2204      	movs	r2, #4
 80009e0:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009e2:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <MX_FMC_Init+0xc4>)
 80009e4:	2210      	movs	r2, #16
 80009e6:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 80009e8:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <MX_FMC_Init+0xc4>)
 80009ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ee:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80009f0:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <MX_FMC_Init+0xc4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <MX_FMC_Init+0xc4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <MX_FMC_Init+0xc4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <MX_FMC_Init+0xc4>)
 8000a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a08:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <MX_FMC_Init+0xc4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_FMC_Init+0xc4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000a16:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_FMC_Init+0xc4>)
 8000a18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_FMC_Init+0xc4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_FMC_Init+0xc4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_FMC_Init+0xc4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_FMC_Init+0xc4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a36:	230f      	movs	r3, #15
 8000a38:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000a3e:	23ff      	movs	r3, #255	@ 0xff
 8000a40:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000a46:	230f      	movs	r3, #15
 8000a48:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_FMC_Init+0xc4>)
 8000a5e:	f005 fd25 	bl	80064ac <HAL_SRAM_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000a68:	f000 fa26 	bl	8000eb8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  /* USER CODE END FMC_Init 2 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000800 	.word	0x20000800
 8000a78:	a0000104 	.word	0xa0000104

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	@ 0x38
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a92:	4bb2      	ldr	r3, [pc, #712]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	4ab1      	ldr	r2, [pc, #708]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9e:	4baf      	ldr	r3, [pc, #700]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aa6:	623b      	str	r3, [r7, #32]
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	4bac      	ldr	r3, [pc, #688]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	4aab      	ldr	r2, [pc, #684]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab6:	4ba9      	ldr	r3, [pc, #676]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac2:	4ba6      	ldr	r3, [pc, #664]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	4aa5      	ldr	r2, [pc, #660]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ace:	4ba3      	ldr	r3, [pc, #652]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4ba0      	ldr	r3, [pc, #640]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4a9f      	ldr	r2, [pc, #636]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae6:	4b9d      	ldr	r3, [pc, #628]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b9a      	ldr	r3, [pc, #616]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	4a99      	ldr	r2, [pc, #612]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afe:	4b97      	ldr	r3, [pc, #604]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0a:	4b94      	ldr	r3, [pc, #592]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	4a93      	ldr	r2, [pc, #588]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b16:	4b91      	ldr	r3, [pc, #580]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000b22:	f001 fc83 	bl	800242c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	4b8d      	ldr	r3, [pc, #564]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	4a8c      	ldr	r2, [pc, #560]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b32:	4b8a      	ldr	r3, [pc, #552]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b87      	ldr	r3, [pc, #540]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	4a86      	ldr	r2, [pc, #536]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4a:	4b84      	ldr	r3, [pc, #528]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b56:	4b81      	ldr	r3, [pc, #516]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	4a80      	ldr	r2, [pc, #512]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b5c:	f043 0320 	orr.w	r3, r3, #32
 8000b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b62:	4b7e      	ldr	r3, [pc, #504]	@ (8000d5c <MX_GPIO_Init+0x2e0>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	f003 0320 	and.w	r3, r3, #32
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f244 0114 	movw	r1, #16404	@ 0x4014
 8000b74:	487a      	ldr	r0, [pc, #488]	@ (8000d60 <MX_GPIO_Init+0x2e4>)
 8000b76:	f001 f907 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b80:	4878      	ldr	r0, [pc, #480]	@ (8000d64 <MX_GPIO_Init+0x2e8>)
 8000b82:	f001 f901 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2140      	movs	r1, #64	@ 0x40
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8e:	f001 f8fb 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2104      	movs	r1, #4
 8000b96:	4874      	ldr	r0, [pc, #464]	@ (8000d68 <MX_GPIO_Init+0x2ec>)
 8000b98:	f001 f8f6 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000b9c:	f44f 6364 	mov.w	r3, #3648	@ 0xe40
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	486c      	ldr	r0, [pc, #432]	@ (8000d6c <MX_GPIO_Init+0x2f0>)
 8000bba:	f000 ff53 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000bbe:	f244 0314 	movw	r3, #16404	@ 0x4014
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4862      	ldr	r0, [pc, #392]	@ (8000d60 <MX_GPIO_Init+0x2e4>)
 8000bd8:	f000 ff44 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bec:	2302      	movs	r3, #2
 8000bee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	485c      	ldr	r0, [pc, #368]	@ (8000d68 <MX_GPIO_Init+0x2ec>)
 8000bf8:	f000 ff34 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000bfc:	23b0      	movs	r3, #176	@ 0xb0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c0c:	230a      	movs	r3, #10
 8000c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4855      	ldr	r0, [pc, #340]	@ (8000d6c <MX_GPIO_Init+0x2f0>)
 8000c18:	f000 ff24 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000c1c:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	484d      	ldr	r0, [pc, #308]	@ (8000d70 <MX_GPIO_Init+0x2f4>)
 8000c3a:	f000 ff13 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4846      	ldr	r0, [pc, #280]	@ (8000d6c <MX_GPIO_Init+0x2f0>)
 8000c54:	f000 ff06 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000c58:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c6a:	230a      	movs	r3, #10
 8000c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	483a      	ldr	r0, [pc, #232]	@ (8000d60 <MX_GPIO_Init+0x2e4>)
 8000c76:	f000 fef5 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000c7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4832      	ldr	r0, [pc, #200]	@ (8000d60 <MX_GPIO_Init+0x2e4>)
 8000c98:	f000 fee4 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000c9c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4829      	ldr	r0, [pc, #164]	@ (8000d60 <MX_GPIO_Init+0x2e4>)
 8000cba:	f000 fed3 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000cbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4823      	ldr	r0, [pc, #140]	@ (8000d64 <MX_GPIO_Init+0x2e8>)
 8000cd8:	f000 fec4 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000cdc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce2:	2312      	movs	r3, #18
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	481d      	ldr	r0, [pc, #116]	@ (8000d70 <MX_GPIO_Init+0x2f4>)
 8000cfa:	f000 feb3 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000cfe:	2340      	movs	r3, #64	@ 0x40
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4814      	ldr	r0, [pc, #80]	@ (8000d64 <MX_GPIO_Init+0x2e8>)
 8000d14:	f000 fea6 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000d18:	2384      	movs	r3, #132	@ 0x84
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d28:	2306      	movs	r3, #6
 8000d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <MX_GPIO_Init+0x2e8>)
 8000d34:	f000 fe96 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <MX_GPIO_Init+0x2e8>)
 8000d54:	f000 fe86 	bl	8001a64 <HAL_GPIO_Init>
 8000d58:	e00c      	b.n	8000d74 <MX_GPIO_Init+0x2f8>
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	48001c00 	.word	0x48001c00
 8000d64:	48000800 	.word	0x48000800
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	48002000 	.word	0x48002000
 8000d70:	48001800 	.word	0x48001800

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000d74:	2318      	movs	r3, #24
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d78:	230b      	movs	r3, #11
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	4849      	ldr	r0, [pc, #292]	@ (8000eac <MX_GPIO_Init+0x430>)
 8000d88:	f000 fe6c 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000d8c:	2381      	movs	r3, #129	@ 0x81
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d90:	230b      	movs	r3, #11
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da2:	f000 fe5f 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000da6:	2320      	movs	r3, #32
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000db6:	2301      	movs	r3, #1
 8000db8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc4:	f000 fe4e 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000dc8:	2340      	movs	r3, #64	@ 0x40
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de2:	f000 fe3f 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000de6:	2302      	movs	r3, #2
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000df6:	2302      	movs	r3, #2
 8000df8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e04:	f000 fe2e 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000e08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000e1a:	230b      	movs	r3, #11
 8000e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4822      	ldr	r0, [pc, #136]	@ (8000eb0 <MX_GPIO_Init+0x434>)
 8000e26:	f000 fe1d 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e48:	f000 fe0c 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e50:	230b      	movs	r3, #11
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4815      	ldr	r0, [pc, #84]	@ (8000eb4 <MX_GPIO_Init+0x438>)
 8000e60:	f000 fe00 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000e64:	2304      	movs	r3, #4
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480e      	ldr	r0, [pc, #56]	@ (8000eb4 <MX_GPIO_Init+0x438>)
 8000e7c:	f000 fdf2 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e92:	2306      	movs	r3, #6
 8000e94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_GPIO_Init+0x438>)
 8000e9e:	f000 fde1 	bl	8001a64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3738      	adds	r7, #56	@ 0x38
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	48000800 	.word	0x48000800
 8000eb0:	48001400 	.word	0x48001400
 8000eb4:	48000400 	.word	0x48000400

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <HAL_MspInit+0x44>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f0c <HAL_MspInit+0x44>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <HAL_MspInit+0x44>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <HAL_MspInit+0x44>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eea:	4a08      	ldr	r2, [pc, #32]	@ (8000f0c <HAL_MspInit+0x44>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_MspInit+0x44>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0b2      	sub	sp, #200	@ 0xc8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	229c      	movs	r2, #156	@ 0x9c
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f007 fa60 	bl	80083f6 <memset>
  if(hi2c->Instance==I2C1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a33      	ldr	r2, [pc, #204]	@ (8001008 <HAL_I2C_MspInit+0xf8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d15e      	bne.n	8000ffe <HAL_I2C_MspInit+0xee>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f40:	2340      	movs	r3, #64	@ 0x40
 8000f42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 f951 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f58:	f7ff ffae 	bl	8000eb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f60:	4a2a      	ldr	r2, [pc, #168]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f68:	4b28      	ldr	r3, [pc, #160]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f74:	4b25      	ldr	r3, [pc, #148]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f78:	4a24      	ldr	r2, [pc, #144]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f80:	4b22      	ldr	r3, [pc, #136]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000f8c:	f001 fa4e 	bl	800242c <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000f90:	2340      	movs	r3, #64	@ 0x40
 8000f92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f96:	2312      	movs	r3, #18
 8000f98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4816      	ldr	r0, [pc, #88]	@ (8001010 <HAL_I2C_MspInit+0x100>)
 8000fb6:	f000 fd55 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000fba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc2:	2312      	movs	r3, #18
 8000fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <HAL_I2C_MspInit+0x104>)
 8000fe2:	f000 fd3f 	bl	8001a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	4a08      	ldr	r2, [pc, #32]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000fec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ff0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ffe:	bf00      	nop
 8001000:	37c8      	adds	r7, #200	@ 0xc8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40005400 	.word	0x40005400
 800100c:	40021000 	.word	0x40021000
 8001010:	48000400 	.word	0x48000400
 8001014:	48001800 	.word	0x48001800

08001018 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0b2      	sub	sp, #200	@ 0xc8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	229c      	movs	r2, #156	@ 0x9c
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f007 f9dc 	bl	80083f6 <memset>
  if(hsd->Instance==SDMMC1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a33      	ldr	r2, [pc, #204]	@ (8001110 <HAL_SD_MspInit+0xf8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d15f      	bne.n	8001108 <HAL_SD_MspInit+0xf0>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001048:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800104c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 800104e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001052:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001056:	f107 0318 	add.w	r3, r7, #24
 800105a:	4618      	mov	r0, r3
 800105c:	f002 f8ca 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001066:	f7ff ff27 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800106a:	4b2a      	ldr	r3, [pc, #168]	@ (8001114 <HAL_SD_MspInit+0xfc>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	4a29      	ldr	r2, [pc, #164]	@ (8001114 <HAL_SD_MspInit+0xfc>)
 8001070:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001076:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <HAL_SD_MspInit+0xfc>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <HAL_SD_MspInit+0xfc>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	4a23      	ldr	r2, [pc, #140]	@ (8001114 <HAL_SD_MspInit+0xfc>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <HAL_SD_MspInit+0xfc>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <HAL_SD_MspInit+0xfc>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	4a1d      	ldr	r2, [pc, #116]	@ (8001114 <HAL_SD_MspInit+0xfc>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <HAL_SD_MspInit+0xfc>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80010b2:	2304      	movs	r3, #4
 80010b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010ca:	230c      	movs	r3, #12
 80010cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4810      	ldr	r0, [pc, #64]	@ (8001118 <HAL_SD_MspInit+0x100>)
 80010d8:	f000 fcc4 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 80010dc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80010e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010f6:	230c      	movs	r3, #12
 80010f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <HAL_SD_MspInit+0x104>)
 8001104:	f000 fcae 	bl	8001a64 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001108:	bf00      	nop
 800110a:	37c8      	adds	r7, #200	@ 0xc8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	50062400 	.word	0x50062400
 8001114:	40021000 	.word	0x40021000
 8001118:	48000c00 	.word	0x48000c00
 800111c:	48000800 	.word	0x48000800

08001120 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a25      	ldr	r2, [pc, #148]	@ (80011d4 <HAL_SPI_MspInit+0xb4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d144      	bne.n	80011cc <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001142:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <HAL_SPI_MspInit+0xb8>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001146:	4a24      	ldr	r2, [pc, #144]	@ (80011d8 <HAL_SPI_MspInit+0xb8>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800114c:	6593      	str	r3, [r2, #88]	@ 0x58
 800114e:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <HAL_SPI_MspInit+0xb8>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800115a:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <HAL_SPI_MspInit+0xb8>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a1e      	ldr	r2, [pc, #120]	@ (80011d8 <HAL_SPI_MspInit+0xb8>)
 8001160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <HAL_SPI_MspInit+0xb8>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <HAL_SPI_MspInit+0xb8>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	4a18      	ldr	r2, [pc, #96]	@ (80011d8 <HAL_SPI_MspInit+0xb8>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117e:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <HAL_SPI_MspInit+0xb8>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 800118a:	2301      	movs	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800119a:	2305      	movs	r3, #5
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	480d      	ldr	r0, [pc, #52]	@ (80011dc <HAL_SPI_MspInit+0xbc>)
 80011a6:	f000 fc5d 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80011aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011bc:	2305      	movs	r3, #5
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <HAL_SPI_MspInit+0xc0>)
 80011c8:	f000 fc4c 	bl	8001a64 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	@ 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40003800 	.word	0x40003800
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48002000 	.word	0x48002000
 80011e0:	48000400 	.word	0x48000400

080011e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0b4      	sub	sp, #208	@ 0xd0
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	229c      	movs	r2, #156	@ 0x9c
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f007 f8f6 	bl	80083f6 <memset>
  if(huart->Instance==USART2)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a54      	ldr	r2, [pc, #336]	@ (8001360 <HAL_UART_MspInit+0x17c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d13c      	bne.n	800128e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001214:	2302      	movs	r3, #2
 8001216:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001218:	2300      	movs	r3, #0
 800121a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121c:	f107 0320 	add.w	r3, r7, #32
 8001220:	4618      	mov	r0, r3
 8001222:	f001 ffe7 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800122c:	f7ff fe44 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001230:	4b4c      	ldr	r3, [pc, #304]	@ (8001364 <HAL_UART_MspInit+0x180>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001234:	4a4b      	ldr	r2, [pc, #300]	@ (8001364 <HAL_UART_MspInit+0x180>)
 8001236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123a:	6593      	str	r3, [r2, #88]	@ 0x58
 800123c:	4b49      	ldr	r3, [pc, #292]	@ (8001364 <HAL_UART_MspInit+0x180>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b46      	ldr	r3, [pc, #280]	@ (8001364 <HAL_UART_MspInit+0x180>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124c:	4a45      	ldr	r2, [pc, #276]	@ (8001364 <HAL_UART_MspInit+0x180>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001254:	4b43      	ldr	r3, [pc, #268]	@ (8001364 <HAL_UART_MspInit+0x180>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8001260:	230c      	movs	r3, #12
 8001262:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001278:	2307      	movs	r3, #7
 800127a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001288:	f000 fbec 	bl	8001a64 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800128c:	e063      	b.n	8001356 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a35      	ldr	r2, [pc, #212]	@ (8001368 <HAL_UART_MspInit+0x184>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d15e      	bne.n	8001356 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001298:	2304      	movs	r3, #4
 800129a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800129c:	2300      	movs	r3, #0
 800129e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 ffa5 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80012b0:	f7ff fe02 	bl	8000eb8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001364 <HAL_UART_MspInit+0x180>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001364 <HAL_UART_MspInit+0x180>)
 80012ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012be:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c0:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <HAL_UART_MspInit+0x180>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <HAL_UART_MspInit+0x180>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	4a24      	ldr	r2, [pc, #144]	@ (8001364 <HAL_UART_MspInit+0x180>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d8:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <HAL_UART_MspInit+0x180>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <HAL_UART_MspInit+0x180>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001364 <HAL_UART_MspInit+0x180>)
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <HAL_UART_MspInit+0x180>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 80012fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001300:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001316:	2307      	movs	r3, #7
 8001318:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001326:	f000 fb9d 	bl	8001a64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 800132a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800132e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001344:	2307      	movs	r3, #7
 8001346:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800134e:	4619      	mov	r1, r3
 8001350:	4806      	ldr	r0, [pc, #24]	@ (800136c <HAL_UART_MspInit+0x188>)
 8001352:	f000 fb87 	bl	8001a64 <HAL_GPIO_Init>
}
 8001356:	bf00      	nop
 8001358:	37d0      	adds	r7, #208	@ 0xd0
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40004400 	.word	0x40004400
 8001364:	40021000 	.word	0x40021000
 8001368:	40004800 	.word	0x40004800
 800136c:	48000400 	.word	0x48000400

08001370 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b0b2      	sub	sp, #200	@ 0xc8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	229c      	movs	r2, #156	@ 0x9c
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f007 f830 	bl	80083f6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800139e:	d16c      	bne.n	800147a <HAL_PCD_MspInit+0x10a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ac:	f107 0318 	add.w	r3, r7, #24
 80013b0:	4618      	mov	r0, r3
 80013b2:	f001 ff1f 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80013bc:	f7ff fd7c 	bl	8000eb8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b30      	ldr	r3, [pc, #192]	@ (8001484 <HAL_PCD_MspInit+0x114>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c4:	4a2f      	ldr	r2, [pc, #188]	@ (8001484 <HAL_PCD_MspInit+0x114>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <HAL_PCD_MspInit+0x114>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697b      	ldr	r3, [r7, #20]
    PA10     ------> USB_OTG_FS_ID
    PA12     ------> USB_OTG_FS_DP
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 80013d8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80013dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013f2:	230a      	movs	r3, #10
 80013f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001402:	f000 fb2f 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 8001406:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800140a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001424:	f000 fb1e 	bl	8001a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001428:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <HAL_PCD_MspInit+0x114>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142c:	4a15      	ldr	r2, [pc, #84]	@ (8001484 <HAL_PCD_MspInit+0x114>)
 800142e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <HAL_PCD_MspInit+0x114>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001438:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001440:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <HAL_PCD_MspInit+0x114>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d114      	bne.n	8001476 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144c:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <HAL_PCD_MspInit+0x114>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001450:	4a0c      	ldr	r2, [pc, #48]	@ (8001484 <HAL_PCD_MspInit+0x114>)
 8001452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001456:	6593      	str	r3, [r2, #88]	@ 0x58
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_PCD_MspInit+0x114>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001464:	f000 ffd2 	bl	800240c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_PCD_MspInit+0x114>)
 800146a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146c:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <HAL_PCD_MspInit+0x114>)
 800146e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001472:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001474:	e001      	b.n	800147a <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001476:	f000 ffc9 	bl	800240c <HAL_PWREx_EnableVddUSB>
}
 800147a:	bf00      	nop
 800147c:	37c8      	adds	r7, #200	@ 0xc8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800149c:	4b32      	ldr	r3, [pc, #200]	@ (8001568 <HAL_FMC_MspInit+0xe0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d15d      	bne.n	8001560 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 80014a4:	4b30      	ldr	r3, [pc, #192]	@ (8001568 <HAL_FMC_MspInit+0xe0>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014aa:	4b30      	ldr	r3, [pc, #192]	@ (800156c <HAL_FMC_MspInit+0xe4>)
 80014ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ae:	4a2f      	ldr	r2, [pc, #188]	@ (800156c <HAL_FMC_MspInit+0xe4>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80014b6:	4b2d      	ldr	r3, [pc, #180]	@ (800156c <HAL_FMC_MspInit+0xe4>)
 80014b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 80014c2:	f64f 739b 	movw	r3, #65435	@ 0xff9b
 80014c6:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d4:	230c      	movs	r3, #12
 80014d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4824      	ldr	r0, [pc, #144]	@ (8001570 <HAL_FMC_MspInit+0xe8>)
 80014de:	f000 fac1 	bl	8001a64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 80014e2:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 80014e6:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014f4:	230c      	movs	r3, #12
 80014f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	481d      	ldr	r0, [pc, #116]	@ (8001574 <HAL_FMC_MspInit+0xec>)
 80014fe:	f000 fab1 	bl	8001a64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001502:	2380      	movs	r3, #128	@ 0x80
 8001504:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001512:	230c      	movs	r3, #12
 8001514:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4817      	ldr	r0, [pc, #92]	@ (8001578 <HAL_FMC_MspInit+0xf0>)
 800151c:	f000 faa2 	bl	8001a64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001520:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8001524:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001532:	230c      	movs	r3, #12
 8001534:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4810      	ldr	r0, [pc, #64]	@ (800157c <HAL_FMC_MspInit+0xf4>)
 800153c:	f000 fa92 	bl	8001a64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001540:	233f      	movs	r3, #63	@ 0x3f
 8001542:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001550:	230c      	movs	r3, #12
 8001552:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4619      	mov	r1, r3
 8001558:	4809      	ldr	r0, [pc, #36]	@ (8001580 <HAL_FMC_MspInit+0xf8>)
 800155a:	f000 fa83 	bl	8001a64 <HAL_GPIO_Init>
 800155e:	e000      	b.n	8001562 <HAL_FMC_MspInit+0xda>
    return;
 8001560:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000850 	.word	0x20000850
 800156c:	40021000 	.word	0x40021000
 8001570:	48001000 	.word	0x48001000
 8001574:	48000c00 	.word	0x48000c00
 8001578:	48000400 	.word	0x48000400
 800157c:	48001400 	.word	0x48001400
 8001580:	48001800 	.word	0x48001800

08001584 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800158c:	f7ff ff7c 	bl	8001488 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0b0      	sub	sp, #192	@ 0xc0
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	229c      	movs	r2, #156	@ 0x9c
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 ff24 	bl	80083f6 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a32      	ldr	r2, [pc, #200]	@ (800167c <HAL_SAI_MspInit+0xe4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d15d      	bne.n	8001674 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80015b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80015be:	2300      	movs	r3, #0
 80015c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80015c2:	2301      	movs	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80015ca:	2310      	movs	r3, #16
 80015cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015d6:	2302      	movs	r3, #2
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80015da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 fe05 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 80015f0:	f7ff fc62 	bl	8000eb8 <Error_Handler>
    }

    if (SAI1_client == 0)
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <HAL_SAI_MspInit+0xe8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10b      	bne.n	8001614 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <HAL_SAI_MspInit+0xec>)
 80015fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001600:	4a20      	ldr	r2, [pc, #128]	@ (8001684 <HAL_SAI_MspInit+0xec>)
 8001602:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001606:	6613      	str	r3, [r2, #96]	@ 0x60
 8001608:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <HAL_SAI_MspInit+0xec>)
 800160a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_SAI_MspInit+0xe8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <HAL_SAI_MspInit+0xe8>)
 800161c:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 800161e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001622:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001638:	230d      	movs	r3, #13
 800163a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001642:	4619      	mov	r1, r3
 8001644:	4810      	ldr	r0, [pc, #64]	@ (8001688 <HAL_SAI_MspInit+0xf0>)
 8001646:	f000 fa0d 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 800164a:	2364      	movs	r3, #100	@ 0x64
 800164c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001662:	230d      	movs	r3, #13
 8001664:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001668:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800166c:	4619      	mov	r1, r3
 800166e:	4807      	ldr	r0, [pc, #28]	@ (800168c <HAL_SAI_MspInit+0xf4>)
 8001670:	f000 f9f8 	bl	8001a64 <HAL_GPIO_Init>

    }
}
 8001674:	bf00      	nop
 8001676:	37c0      	adds	r7, #192	@ 0xc0
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40015404 	.word	0x40015404
 8001680:	20000854 	.word	0x20000854
 8001684:	40021000 	.word	0x40021000
 8001688:	48000400 	.word	0x48000400
 800168c:	48001000 	.word	0x48001000

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <NMI_Handler+0x4>

08001698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <MemManage_Handler+0x4>

080016a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e6:	f000 f893 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <SystemInit+0x20>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fa:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <SystemInit+0x20>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001718:	f7ff ffea 	bl	80016f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopForever+0x6>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopForever+0xe>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopForever+0x16>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f006 fe61 	bl	8008408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001746:	f7fe feef 	bl	8000528 <main>

0800174a <LoopForever>:

LoopForever:
    b LoopForever
 800174a:	e7fe      	b.n	800174a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800174c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001758:	080084e8 	.word	0x080084e8
  ldr r2, =_sbss
 800175c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001760:	2000085c 	.word	0x2000085c

08001764 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC1_IRQHandler>

08001766 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f943 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f80e 	bl	8001798 <HAL_InitTick>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	e001      	b.n	800178c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001788:	f7ff fb9e 	bl	8000ec8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800178c:	79fb      	ldrb	r3, [r7, #7]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017a4:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <HAL_InitTick+0x6c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d023      	beq.n	80017f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <HAL_InitTick+0x70>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <HAL_InitTick+0x6c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f941 	bl	8001a4a <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10f      	bne.n	80017ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d809      	bhi.n	80017e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f000 f919 	bl	8001a12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e0:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <HAL_InitTick+0x74>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e007      	b.n	80017f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e004      	b.n	80017f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	e001      	b.n	80017f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000008 	.word	0x20000008
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x20>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_IncTick+0x24>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008
 8001834:	20000858 	.word	0x20000858

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000858 	.word	0x20000858

08001850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff ffee 	bl	8001838 <HAL_GetTick>
 800185c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d005      	beq.n	8001876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_Delay+0x44>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001876:	bf00      	nop
 8001878:	f7ff ffde 	bl	8001838 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8f7      	bhi.n	8001878 <HAL_Delay+0x28>
  {
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008

08001898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <__NVIC_GetPriorityGrouping+0x18>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 0307 	and.w	r3, r3, #7
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	@ (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	@ (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	@ 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	@ 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c8:	d301      	bcc.n	80019ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00f      	b.n	80019ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ce:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <SysTick_Config+0x40>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d6:	210f      	movs	r1, #15
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f7ff ff8e 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <SysTick_Config+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e6:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <SysTick_Config+0x40>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff47 	bl	8001898 <__NVIC_SetPriorityGrouping>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff5c 	bl	80018e0 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff8e 	bl	8001950 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5d 	bl	80018fc <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffb0 	bl	80019b8 <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a72:	e166      	b.n	8001d42 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	4013      	ands	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8158 	beq.w	8001d3c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d005      	beq.n	8001aa4 <HAL_GPIO_Init+0x40>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d130      	bne.n	8001b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ada:	2201      	movs	r2, #1
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	f003 0201 	and.w	r2, r3, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d017      	beq.n	8001b42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d123      	bne.n	8001b96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	08da      	lsrs	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3208      	adds	r2, #8
 8001b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	6939      	ldr	r1, [r7, #16]
 8001b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0203 	and.w	r2, r3, #3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80b2 	beq.w	8001d3c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd8:	4b61      	ldr	r3, [pc, #388]	@ (8001d60 <HAL_GPIO_Init+0x2fc>)
 8001bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bdc:	4a60      	ldr	r2, [pc, #384]	@ (8001d60 <HAL_GPIO_Init+0x2fc>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001be4:	4b5e      	ldr	r3, [pc, #376]	@ (8001d60 <HAL_GPIO_Init+0x2fc>)
 8001be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bf0:	4a5c      	ldr	r2, [pc, #368]	@ (8001d64 <HAL_GPIO_Init+0x300>)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c1a:	d02b      	beq.n	8001c74 <HAL_GPIO_Init+0x210>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a52      	ldr	r2, [pc, #328]	@ (8001d68 <HAL_GPIO_Init+0x304>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d025      	beq.n	8001c70 <HAL_GPIO_Init+0x20c>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a51      	ldr	r2, [pc, #324]	@ (8001d6c <HAL_GPIO_Init+0x308>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d01f      	beq.n	8001c6c <HAL_GPIO_Init+0x208>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a50      	ldr	r2, [pc, #320]	@ (8001d70 <HAL_GPIO_Init+0x30c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d019      	beq.n	8001c68 <HAL_GPIO_Init+0x204>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a4f      	ldr	r2, [pc, #316]	@ (8001d74 <HAL_GPIO_Init+0x310>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d013      	beq.n	8001c64 <HAL_GPIO_Init+0x200>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a4e      	ldr	r2, [pc, #312]	@ (8001d78 <HAL_GPIO_Init+0x314>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00d      	beq.n	8001c60 <HAL_GPIO_Init+0x1fc>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a4d      	ldr	r2, [pc, #308]	@ (8001d7c <HAL_GPIO_Init+0x318>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d007      	beq.n	8001c5c <HAL_GPIO_Init+0x1f8>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a4c      	ldr	r2, [pc, #304]	@ (8001d80 <HAL_GPIO_Init+0x31c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_GPIO_Init+0x1f4>
 8001c54:	2307      	movs	r3, #7
 8001c56:	e00e      	b.n	8001c76 <HAL_GPIO_Init+0x212>
 8001c58:	2308      	movs	r3, #8
 8001c5a:	e00c      	b.n	8001c76 <HAL_GPIO_Init+0x212>
 8001c5c:	2306      	movs	r3, #6
 8001c5e:	e00a      	b.n	8001c76 <HAL_GPIO_Init+0x212>
 8001c60:	2305      	movs	r3, #5
 8001c62:	e008      	b.n	8001c76 <HAL_GPIO_Init+0x212>
 8001c64:	2304      	movs	r3, #4
 8001c66:	e006      	b.n	8001c76 <HAL_GPIO_Init+0x212>
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e004      	b.n	8001c76 <HAL_GPIO_Init+0x212>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e002      	b.n	8001c76 <HAL_GPIO_Init+0x212>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_GPIO_Init+0x212>
 8001c74:	2300      	movs	r3, #0
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	f002 0203 	and.w	r2, r2, #3
 8001c7c:	0092      	lsls	r2, r2, #2
 8001c7e:	4093      	lsls	r3, r2
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c86:	4937      	ldr	r1, [pc, #220]	@ (8001d64 <HAL_GPIO_Init+0x300>)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c94:	4b3b      	ldr	r3, [pc, #236]	@ (8001d84 <HAL_GPIO_Init+0x320>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cb8:	4a32      	ldr	r2, [pc, #200]	@ (8001d84 <HAL_GPIO_Init+0x320>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cbe:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <HAL_GPIO_Init+0x320>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ce2:	4a28      	ldr	r2, [pc, #160]	@ (8001d84 <HAL_GPIO_Init+0x320>)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ce8:	4b26      	ldr	r3, [pc, #152]	@ (8001d84 <HAL_GPIO_Init+0x320>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d84 <HAL_GPIO_Init+0x320>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <HAL_GPIO_Init+0x320>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d36:	4a13      	ldr	r2, [pc, #76]	@ (8001d84 <HAL_GPIO_Init+0x320>)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f47f ae91 	bne.w	8001a74 <HAL_GPIO_Init+0x10>
  }
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010000 	.word	0x40010000
 8001d68:	48000400 	.word	0x48000400
 8001d6c:	48000800 	.word	0x48000800
 8001d70:	48000c00 	.word	0x48000c00
 8001d74:	48001000 	.word	0x48001000
 8001d78:	48001400 	.word	0x48001400
 8001d7c:	48001800 	.word	0x48001800
 8001d80:	48001c00 	.word	0x48001c00
 8001d84:	40010400 	.word	0x40010400

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da4:	e002      	b.n	8001dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e08d      	b.n	8001ee6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff f896 	bl	8000f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2224      	movs	r2, #36	@ 0x24
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	e006      	b.n	8001e40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d108      	bne.n	8001e5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	e007      	b.n	8001e6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69d9      	ldr	r1, [r3, #28]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d138      	bne.n	8001f76 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e032      	b.n	8001f78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2224      	movs	r2, #36	@ 0x24
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f76:	2302      	movs	r3, #2
  }
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d139      	bne.n	800200e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e033      	b.n	8002010 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2224      	movs	r2, #36	@ 0x24
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
  }
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af02      	add	r7, sp, #8
 8002022:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e101      	b.n	8002232 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff f994 	bl	8001370 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2203      	movs	r2, #3
 800204c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f005 ff3f 	bl	8007ede <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	7c1a      	ldrb	r2, [r3, #16]
 8002068:	f88d 2000 	strb.w	r2, [sp]
 800206c:	3304      	adds	r3, #4
 800206e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002070:	f005 ff08 	bl	8007e84 <USB_CoreInit>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2202      	movs	r2, #2
 800207e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0d5      	b.n	8002232 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f005 ff37 	bl	8007f00 <USB_SetCurrentMode>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0c6      	b.n	8002232 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e04a      	b.n	8002140 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	3315      	adds	r3, #21
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	3314      	adds	r3, #20
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	b298      	uxth	r0, r3
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	332e      	adds	r3, #46	@ 0x2e
 80020e6:	4602      	mov	r2, r0
 80020e8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	3318      	adds	r3, #24
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	331c      	adds	r3, #28
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	3320      	adds	r3, #32
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	3324      	adds	r3, #36	@ 0x24
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	3301      	adds	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	791b      	ldrb	r3, [r3, #4]
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	429a      	cmp	r2, r3
 8002148:	d3af      	bcc.n	80020aa <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	e044      	b.n	80021da <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	3301      	adds	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	791b      	ldrb	r3, [r3, #4]
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d3b5      	bcc.n	8002150 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7c1a      	ldrb	r2, [r3, #16]
 80021ec:	f88d 2000 	strb.w	r2, [sp]
 80021f0:	3304      	adds	r3, #4
 80021f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f4:	f005 fed0 	bl	8007f98 <USB_DevInit>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2202      	movs	r2, #2
 8002202:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e013      	b.n	8002232 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7b1b      	ldrb	r3, [r3, #12]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d102      	bne.n	8002226 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f80a 	bl	800223a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f006 f875 	bl	800831a <USB_DevDisconnect>

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226c:	f043 0303 	orr.w	r3, r3, #3
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002288:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002294:	d102      	bne.n	800229c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800229a:	e00b      	b.n	80022b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800229c:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800229e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022aa:	d102      	bne.n	80022b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80022ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022b0:	e000      	b.n	80022b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80022b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000

080022c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d141      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022de:	d131      	bne.n	8002344 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e0:	4b47      	ldr	r3, [pc, #284]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022e6:	4a46      	ldr	r2, [pc, #280]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f0:	4b43      	ldr	r3, [pc, #268]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022f8:	4a41      	ldr	r2, [pc, #260]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002300:	4b40      	ldr	r3, [pc, #256]	@ (8002404 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2232      	movs	r2, #50	@ 0x32
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	4a3f      	ldr	r2, [pc, #252]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0c9b      	lsrs	r3, r3, #18
 8002312:	3301      	adds	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002316:	e002      	b.n	800231e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3b01      	subs	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800231e:	4b38      	ldr	r3, [pc, #224]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232a:	d102      	bne.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f2      	bne.n	8002318 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002332:	4b33      	ldr	r3, [pc, #204]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800233e:	d158      	bne.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e057      	b.n	80023f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002344:	4b2e      	ldr	r3, [pc, #184]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800234a:	4a2d      	ldr	r2, [pc, #180]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002350:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002354:	e04d      	b.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800235c:	d141      	bne.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800235e:	4b28      	ldr	r3, [pc, #160]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800236a:	d131      	bne.n	80023d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800236c:	4b24      	ldr	r3, [pc, #144]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002372:	4a23      	ldr	r2, [pc, #140]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002378:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800237c:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002384:	4a1e      	ldr	r2, [pc, #120]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800238a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800238c:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2232      	movs	r2, #50	@ 0x32
 8002392:	fb02 f303 	mul.w	r3, r2, r3
 8002396:	4a1c      	ldr	r2, [pc, #112]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	0c9b      	lsrs	r3, r3, #18
 800239e:	3301      	adds	r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023a2:	e002      	b.n	80023aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023aa:	4b15      	ldr	r3, [pc, #84]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b6:	d102      	bne.n	80023be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f2      	bne.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023be:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ca:	d112      	bne.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e011      	b.n	80023f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80023e0:	e007      	b.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023e2:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023ea:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40007000 	.word	0x40007000
 8002404:	20000000 	.word	0x20000000
 8002408:	431bde83 	.word	0x431bde83

0800240c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002416:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800241a:	6053      	str	r3, [r2, #4]
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40007000 	.word	0x40007000

0800242c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002430:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002436:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800243a:	6053      	str	r3, [r2, #4]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40007000 	.word	0x40007000

0800244c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	f000 bc08 	b.w	8002c70 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002460:	4b96      	ldr	r3, [pc, #600]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800246a:	4b94      	ldr	r3, [pc, #592]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80e4 	beq.w	800264a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_RCC_OscConfig+0x4c>
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	f040 808b 	bne.w	80025a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b01      	cmp	r3, #1
 8002494:	f040 8087 	bne.w	80025a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002498:	4b88      	ldr	r3, [pc, #544]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_OscConfig+0x64>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e3df      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1a      	ldr	r2, [r3, #32]
 80024b4:	4b81      	ldr	r3, [pc, #516]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <HAL_RCC_OscConfig+0x7e>
 80024c0:	4b7e      	ldr	r3, [pc, #504]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024c8:	e005      	b.n	80024d6 <HAL_RCC_OscConfig+0x8a>
 80024ca:	4b7c      	ldr	r3, [pc, #496]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80024cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d223      	bcs.n	8002522 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fdca 	bl	8003078 <RCC_SetFlashLatencyFromMSIRange>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e3c0      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ee:	4b73      	ldr	r3, [pc, #460]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a72      	ldr	r2, [pc, #456]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b70      	ldr	r3, [pc, #448]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	496d      	ldr	r1, [pc, #436]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800250c:	4b6b      	ldr	r3, [pc, #428]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	4968      	ldr	r1, [pc, #416]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
 8002520:	e025      	b.n	800256e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002522:	4b66      	ldr	r3, [pc, #408]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a65      	ldr	r2, [pc, #404]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b63      	ldr	r3, [pc, #396]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4960      	ldr	r1, [pc, #384]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002540:	4b5e      	ldr	r3, [pc, #376]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	495b      	ldr	r1, [pc, #364]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fd8a 	bl	8003078 <RCC_SetFlashLatencyFromMSIRange>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e380      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800256e:	f000 fcc1 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002572:	4602      	mov	r2, r0
 8002574:	4b51      	ldr	r3, [pc, #324]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	4950      	ldr	r1, [pc, #320]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002580:	5ccb      	ldrb	r3, [r1, r3]
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a4e      	ldr	r2, [pc, #312]	@ (80026c4 <HAL_RCC_OscConfig+0x278>)
 800258c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800258e:	4b4e      	ldr	r3, [pc, #312]	@ (80026c8 <HAL_RCC_OscConfig+0x27c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff f900 	bl	8001798 <HAL_InitTick>
 8002598:	4603      	mov	r3, r0
 800259a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d052      	beq.n	8002648 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	e364      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d032      	beq.n	8002614 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025ae:	4b43      	ldr	r3, [pc, #268]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a42      	ldr	r2, [pc, #264]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ba:	f7ff f93d 	bl	8001838 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c2:	f7ff f939 	bl	8001838 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e34d      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d4:	4b39      	ldr	r3, [pc, #228]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e0:	4b36      	ldr	r3, [pc, #216]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a35      	ldr	r2, [pc, #212]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80025e6:	f043 0308 	orr.w	r3, r3, #8
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b33      	ldr	r3, [pc, #204]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4930      	ldr	r1, [pc, #192]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025fe:	4b2f      	ldr	r3, [pc, #188]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	492b      	ldr	r1, [pc, #172]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
 8002612:	e01a      	b.n	800264a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002614:	4b29      	ldr	r3, [pc, #164]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a28      	ldr	r2, [pc, #160]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002620:	f7ff f90a 	bl	8001838 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002628:	f7ff f906 	bl	8001838 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e31a      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x1dc>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002648:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d073      	beq.n	800273e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d005      	beq.n	8002668 <HAL_RCC_OscConfig+0x21c>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d10e      	bne.n	8002680 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d10b      	bne.n	8002680 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d063      	beq.n	800273c <HAL_RCC_OscConfig+0x2f0>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d15f      	bne.n	800273c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e2f7      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002688:	d106      	bne.n	8002698 <HAL_RCC_OscConfig+0x24c>
 800268a:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e025      	b.n	80026e4 <HAL_RCC_OscConfig+0x298>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026a0:	d114      	bne.n	80026cc <HAL_RCC_OscConfig+0x280>
 80026a2:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a05      	ldr	r2, [pc, #20]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80026a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b03      	ldr	r3, [pc, #12]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a02      	ldr	r2, [pc, #8]	@ (80026bc <HAL_RCC_OscConfig+0x270>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e013      	b.n	80026e4 <HAL_RCC_OscConfig+0x298>
 80026bc:	40021000 	.word	0x40021000
 80026c0:	08008468 	.word	0x08008468
 80026c4:	20000000 	.word	0x20000000
 80026c8:	20000004 	.word	0x20000004
 80026cc:	4ba0      	ldr	r3, [pc, #640]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a9f      	ldr	r2, [pc, #636]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80026d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b9d      	ldr	r3, [pc, #628]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a9c      	ldr	r2, [pc, #624]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80026de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7ff f8a4 	bl	8001838 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f4:	f7ff f8a0 	bl	8001838 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	@ 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e2b4      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002706:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x2a8>
 8002712:	e014      	b.n	800273e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7ff f890 	bl	8001838 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271c:	f7ff f88c 	bl	8001838 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	@ 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e2a0      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800272e:	4b88      	ldr	r3, [pc, #544]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x2d0>
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d060      	beq.n	800280c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	2b04      	cmp	r3, #4
 800274e:	d005      	beq.n	800275c <HAL_RCC_OscConfig+0x310>
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d119      	bne.n	800278a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d116      	bne.n	800278a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800275c:	4b7c      	ldr	r3, [pc, #496]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_OscConfig+0x328>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e27d      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002774:	4b76      	ldr	r3, [pc, #472]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	4973      	ldr	r1, [pc, #460]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002788:	e040      	b.n	800280c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d023      	beq.n	80027da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002792:	4b6f      	ldr	r3, [pc, #444]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6e      	ldr	r2, [pc, #440]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800279c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7ff f84b 	bl	8001838 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a6:	f7ff f847 	bl	8001838 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e25b      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b8:	4b65      	ldr	r3, [pc, #404]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b62      	ldr	r3, [pc, #392]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	495f      	ldr	r1, [pc, #380]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
 80027d8:	e018      	b.n	800280c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027da:	4b5d      	ldr	r3, [pc, #372]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a5c      	ldr	r2, [pc, #368]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80027e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7ff f827 	bl	8001838 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ee:	f7ff f823 	bl	8001838 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e237      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002800:	4b53      	ldr	r3, [pc, #332]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d03c      	beq.n	8002892 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01c      	beq.n	800285a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002820:	4b4b      	ldr	r3, [pc, #300]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002826:	4a4a      	ldr	r2, [pc, #296]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002830:	f7ff f802 	bl	8001838 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002838:	f7fe fffe 	bl	8001838 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e212      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800284a:	4b41      	ldr	r3, [pc, #260]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 800284c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ef      	beq.n	8002838 <HAL_RCC_OscConfig+0x3ec>
 8002858:	e01b      	b.n	8002892 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285a:	4b3d      	ldr	r3, [pc, #244]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 800285c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002860:	4a3b      	ldr	r2, [pc, #236]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286a:	f7fe ffe5 	bl	8001838 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002872:	f7fe ffe1 	bl	8001838 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e1f5      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1ef      	bne.n	8002872 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80a6 	beq.w	80029ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a0:	2300      	movs	r3, #0
 80028a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10d      	bne.n	80028cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	4a26      	ldr	r2, [pc, #152]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80028bc:	4b24      	ldr	r3, [pc, #144]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c8:	2301      	movs	r3, #1
 80028ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028cc:	4b21      	ldr	r3, [pc, #132]	@ (8002954 <HAL_RCC_OscConfig+0x508>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d118      	bne.n	800290a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <HAL_RCC_OscConfig+0x508>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002954 <HAL_RCC_OscConfig+0x508>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e4:	f7fe ffa8 	bl	8001838 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ec:	f7fe ffa4 	bl	8001838 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1b8      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fe:	4b15      	ldr	r3, [pc, #84]	@ (8002954 <HAL_RCC_OscConfig+0x508>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d108      	bne.n	8002924 <HAL_RCC_OscConfig+0x4d8>
 8002912:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002918:	4a0d      	ldr	r2, [pc, #52]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002922:	e029      	b.n	8002978 <HAL_RCC_OscConfig+0x52c>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b05      	cmp	r3, #5
 800292a:	d115      	bne.n	8002958 <HAL_RCC_OscConfig+0x50c>
 800292c:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002932:	4a07      	ldr	r2, [pc, #28]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800293c:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002942:	4a03      	ldr	r2, [pc, #12]	@ (8002950 <HAL_RCC_OscConfig+0x504>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800294c:	e014      	b.n	8002978 <HAL_RCC_OscConfig+0x52c>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	40007000 	.word	0x40007000
 8002958:	4b9d      	ldr	r3, [pc, #628]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295e:	4a9c      	ldr	r2, [pc, #624]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002968:	4b99      	ldr	r3, [pc, #612]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296e:	4a98      	ldr	r2, [pc, #608]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d016      	beq.n	80029ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe ff5a 	bl	8001838 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002986:	e00a      	b.n	800299e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe ff56 	bl	8001838 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e168      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299e:	4b8c      	ldr	r3, [pc, #560]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0ed      	beq.n	8002988 <HAL_RCC_OscConfig+0x53c>
 80029ac:	e015      	b.n	80029da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ae:	f7fe ff43 	bl	8001838 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7fe ff3f 	bl	8001838 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e151      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029cc:	4b80      	ldr	r3, [pc, #512]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ed      	bne.n	80029b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029da:	7ffb      	ldrb	r3, [r7, #31]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d105      	bne.n	80029ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e0:	4b7b      	ldr	r3, [pc, #492]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e4:	4a7a      	ldr	r2, [pc, #488]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 80029e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d03c      	beq.n	8002a72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01c      	beq.n	8002a3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a00:	4b73      	ldr	r3, [pc, #460]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a06:	4a72      	ldr	r2, [pc, #456]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7fe ff12 	bl	8001838 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a18:	f7fe ff0e 	bl	8001838 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e122      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a2a:	4b69      	ldr	r3, [pc, #420]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0ef      	beq.n	8002a18 <HAL_RCC_OscConfig+0x5cc>
 8002a38:	e01b      	b.n	8002a72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a3a:	4b65      	ldr	r3, [pc, #404]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a40:	4a63      	ldr	r2, [pc, #396]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fef5 	bl	8001838 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a52:	f7fe fef1 	bl	8001838 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e105      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a64:	4b5a      	ldr	r3, [pc, #360]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1ef      	bne.n	8002a52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80f9 	beq.w	8002c6e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	f040 80cf 	bne.w	8002c24 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a86:	4b52      	ldr	r3, [pc, #328]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 0203 	and.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d12c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d123      	bne.n	8002af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d11b      	bne.n	8002af4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d113      	bne.n	8002af4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d109      	bne.n	8002af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	3b01      	subs	r3, #1
 8002aee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d071      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d068      	beq.n	8002bcc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002afa:	4b35      	ldr	r3, [pc, #212]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b06:	4b32      	ldr	r3, [pc, #200]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0ac      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b16:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002b1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b22:	f7fe fe89 	bl	8001838 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7fe fe85 	bl	8001838 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e099      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b3c:	4b24      	ldr	r3, [pc, #144]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f0      	bne.n	8002b2a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b48:	4b21      	ldr	r3, [pc, #132]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	4b21      	ldr	r3, [pc, #132]	@ (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b58:	3a01      	subs	r2, #1
 8002b5a:	0112      	lsls	r2, r2, #4
 8002b5c:	4311      	orrs	r1, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b62:	0212      	lsls	r2, r2, #8
 8002b64:	4311      	orrs	r1, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b6a:	0852      	lsrs	r2, r2, #1
 8002b6c:	3a01      	subs	r2, #1
 8002b6e:	0552      	lsls	r2, r2, #21
 8002b70:	4311      	orrs	r1, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b76:	0852      	lsrs	r2, r2, #1
 8002b78:	3a01      	subs	r2, #1
 8002b7a:	0652      	lsls	r2, r2, #25
 8002b7c:	4311      	orrs	r1, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b82:	06d2      	lsls	r2, r2, #27
 8002b84:	430a      	orrs	r2, r1
 8002b86:	4912      	ldr	r1, [pc, #72]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b8c:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0f      	ldr	r2, [pc, #60]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b98:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ba4:	f7fe fe48 	bl	8001838 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fe44 	bl	8001838 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e058      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbe:	4b04      	ldr	r3, [pc, #16]	@ (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bca:	e050      	b.n	8002c6e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e04f      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd8:	4b27      	ldr	r3, [pc, #156]	@ (8002c78 <HAL_RCC_OscConfig+0x82c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d144      	bne.n	8002c6e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002be4:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <HAL_RCC_OscConfig+0x82c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a23      	ldr	r2, [pc, #140]	@ (8002c78 <HAL_RCC_OscConfig+0x82c>)
 8002bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bf0:	4b21      	ldr	r3, [pc, #132]	@ (8002c78 <HAL_RCC_OscConfig+0x82c>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4a20      	ldr	r2, [pc, #128]	@ (8002c78 <HAL_RCC_OscConfig+0x82c>)
 8002bf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bfc:	f7fe fe1c 	bl	8001838 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fe18 	bl	8001838 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e02c      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c16:	4b18      	ldr	r3, [pc, #96]	@ (8002c78 <HAL_RCC_OscConfig+0x82c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x7b8>
 8002c22:	e024      	b.n	8002c6e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d01f      	beq.n	8002c6a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b13      	ldr	r3, [pc, #76]	@ (8002c78 <HAL_RCC_OscConfig+0x82c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a12      	ldr	r2, [pc, #72]	@ (8002c78 <HAL_RCC_OscConfig+0x82c>)
 8002c30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7fe fdff 	bl	8001838 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7fe fdfb 	bl	8001838 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e00f      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c50:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <HAL_RCC_OscConfig+0x82c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c5c:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <HAL_RCC_OscConfig+0x82c>)
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	4905      	ldr	r1, [pc, #20]	@ (8002c78 <HAL_RCC_OscConfig+0x82c>)
 8002c62:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <HAL_RCC_OscConfig+0x830>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	60cb      	str	r3, [r1, #12]
 8002c68:	e001      	b.n	8002c6e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3720      	adds	r7, #32
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	feeefffc 	.word	0xfeeefffc

08002c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e11d      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b90      	ldr	r3, [pc, #576]	@ (8002edc <HAL_RCC_ClockConfig+0x25c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d910      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b8d      	ldr	r3, [pc, #564]	@ (8002edc <HAL_RCC_ClockConfig+0x25c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 020f 	bic.w	r2, r3, #15
 8002cae:	498b      	ldr	r1, [pc, #556]	@ (8002edc <HAL_RCC_ClockConfig+0x25c>)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b89      	ldr	r3, [pc, #548]	@ (8002edc <HAL_RCC_ClockConfig+0x25c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e105      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	4b81      	ldr	r3, [pc, #516]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d908      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	497b      	ldr	r1, [pc, #492]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d079      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d11e      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0a:	4b75      	ldr	r3, [pc, #468]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0dc      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d1a:	f000 fa07 	bl	800312c <RCC_GetSysClockFreqFromPLLSource>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4a70      	ldr	r2, [pc, #448]	@ (8002ee4 <HAL_RCC_ClockConfig+0x264>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d946      	bls.n	8002db4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d26:	4b6e      	ldr	r3, [pc, #440]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d140      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d32:	4b6b      	ldr	r3, [pc, #428]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d3a:	4a69      	ldr	r2, [pc, #420]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d42:	2380      	movs	r3, #128	@ 0x80
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	e035      	b.n	8002db4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d50:	4b63      	ldr	r3, [pc, #396]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d115      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0b9      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d68:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0ad      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d78:	4b59      	ldr	r3, [pc, #356]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0a5      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d88:	f000 f8b4 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4a55      	ldr	r2, [pc, #340]	@ (8002ee4 <HAL_RCC_ClockConfig+0x264>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d90f      	bls.n	8002db4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d94:	4b52      	ldr	r3, [pc, #328]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002da0:	4b4f      	ldr	r3, [pc, #316]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002da8:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002db4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f023 0203 	bic.w	r2, r3, #3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4947      	ldr	r1, [pc, #284]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc6:	f7fe fd37 	bl	8001838 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dce:	f7fe fd33 	bl	8001838 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e077      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 020c 	and.w	r2, r3, #12
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d1eb      	bne.n	8002dce <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b80      	cmp	r3, #128	@ 0x80
 8002dfa:	d105      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dfc:	4b38      	ldr	r3, [pc, #224]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a37      	ldr	r2, [pc, #220]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002e02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e06:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d010      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	4b31      	ldr	r3, [pc, #196]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d208      	bcs.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e24:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	492b      	ldr	r1, [pc, #172]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e36:	4b29      	ldr	r3, [pc, #164]	@ (8002edc <HAL_RCC_ClockConfig+0x25c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d210      	bcs.n	8002e66 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e44:	4b25      	ldr	r3, [pc, #148]	@ (8002edc <HAL_RCC_ClockConfig+0x25c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 020f 	bic.w	r2, r3, #15
 8002e4c:	4923      	ldr	r1, [pc, #140]	@ (8002edc <HAL_RCC_ClockConfig+0x25c>)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e54:	4b21      	ldr	r3, [pc, #132]	@ (8002edc <HAL_RCC_ClockConfig+0x25c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e036      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	4918      	ldr	r1, [pc, #96]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d009      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e90:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4910      	ldr	r1, [pc, #64]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ea4:	f000 f826 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <HAL_RCC_ClockConfig+0x260>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	490c      	ldr	r1, [pc, #48]	@ (8002ee8 <HAL_RCC_ClockConfig+0x268>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <HAL_RCC_ClockConfig+0x26c>)
 8002ec2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <HAL_RCC_ClockConfig+0x270>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fc65 	bl	8001798 <HAL_InitTick>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	04c4b400 	.word	0x04c4b400
 8002ee8:	08008468 	.word	0x08008468
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	20000004 	.word	0x20000004

08002ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	@ 0x24
 8002ef8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f02:	4b3e      	ldr	r3, [pc, #248]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x34>
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d121      	bne.n	8002f66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d11e      	bne.n	8002f66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f28:	4b34      	ldr	r3, [pc, #208]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f34:	4b31      	ldr	r3, [pc, #196]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	e005      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f44:	4b2d      	ldr	r3, [pc, #180]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f50:	4a2b      	ldr	r2, [pc, #172]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10d      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d102      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f6c:	4b25      	ldr	r3, [pc, #148]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	e004      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f78:	4b22      	ldr	r3, [pc, #136]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d134      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f82:	4b1e      	ldr	r3, [pc, #120]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d003      	beq.n	8002f9a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d003      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xac>
 8002f98:	e005      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f9c:	617b      	str	r3, [r7, #20]
      break;
 8002f9e:	e005      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fa0:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fa2:	617b      	str	r3, [r7, #20]
      break;
 8002fa4:	e002      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	617b      	str	r3, [r7, #20]
      break;
 8002faa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fac:	4b13      	ldr	r3, [pc, #76]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fba:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	fb03 f202 	mul.w	r2, r3, r2
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	0e5b      	lsrs	r3, r3, #25
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fec:	69bb      	ldr	r3, [r7, #24]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3724      	adds	r7, #36	@ 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
 8003000:	08008480 	.word	0x08008480
 8003004:	00f42400 	.word	0x00f42400

08003008 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800300c:	4b03      	ldr	r3, [pc, #12]	@ (800301c <HAL_RCC_GetHCLKFreq+0x14>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20000000 	.word	0x20000000

08003020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003024:	f7ff fff0 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_RCC_GetPCLK1Freq+0x24>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4904      	ldr	r1, [pc, #16]	@ (8003048 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003040:	4618      	mov	r0, r3
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	08008478 	.word	0x08008478

0800304c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003050:	f7ff ffda 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	0adb      	lsrs	r3, r3, #11
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4904      	ldr	r1, [pc, #16]	@ (8003074 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000
 8003074:	08008478 	.word	0x08008478

08003078 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003084:	4b27      	ldr	r3, [pc, #156]	@ (8003124 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003090:	f7ff f8f8 	bl	8002284 <HAL_PWREx_GetVoltageRange>
 8003094:	6178      	str	r0, [r7, #20]
 8003096:	e014      	b.n	80030c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003098:	4b22      	ldr	r3, [pc, #136]	@ (8003124 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800309a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309c:	4a21      	ldr	r2, [pc, #132]	@ (8003124 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800309e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80030a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003124 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030b0:	f7ff f8e8 	bl	8002284 <HAL_PWREx_GetVoltageRange>
 80030b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003124 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030c8:	d10b      	bne.n	80030e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b80      	cmp	r3, #128	@ 0x80
 80030ce:	d913      	bls.n	80030f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80030d4:	d902      	bls.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030d6:	2302      	movs	r3, #2
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	e00d      	b.n	80030f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030dc:	2301      	movs	r3, #1
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	e00a      	b.n	80030f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80030e6:	d902      	bls.n	80030ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80030e8:	2302      	movs	r3, #2
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	e004      	b.n	80030f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b70      	cmp	r3, #112	@ 0x70
 80030f2:	d101      	bne.n	80030f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f4:	2301      	movs	r3, #1
 80030f6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f023 020f 	bic.w	r2, r3, #15
 8003100:	4909      	ldr	r1, [pc, #36]	@ (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003108:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	429a      	cmp	r2, r3
 8003114:	d001      	beq.n	800311a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	40022000 	.word	0x40022000

0800312c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003132:	4b2d      	ldr	r3, [pc, #180]	@ (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d00b      	beq.n	800315a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d825      	bhi.n	8003194 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d008      	beq.n	8003160 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d11f      	bne.n	8003194 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003154:	4b25      	ldr	r3, [pc, #148]	@ (80031ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003156:	613b      	str	r3, [r7, #16]
    break;
 8003158:	e01f      	b.n	800319a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800315a:	4b24      	ldr	r3, [pc, #144]	@ (80031ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800315c:	613b      	str	r3, [r7, #16]
    break;
 800315e:	e01c      	b.n	800319a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003160:	4b21      	ldr	r3, [pc, #132]	@ (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d107      	bne.n	800317c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800316c:	4b1e      	ldr	r3, [pc, #120]	@ (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e005      	b.n	8003188 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800317c:	4b1a      	ldr	r3, [pc, #104]	@ (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003188:	4a19      	ldr	r2, [pc, #100]	@ (80031f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	613b      	str	r3, [r7, #16]
    break;
 8003192:	e002      	b.n	800319a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
    break;
 8003198:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800319a:	4b13      	ldr	r3, [pc, #76]	@ (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	3301      	adds	r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031a8:	4b0f      	ldr	r3, [pc, #60]	@ (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	fb03 f202 	mul.w	r2, r3, r2
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031c0:	4b09      	ldr	r3, [pc, #36]	@ (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	0e5b      	lsrs	r3, r3, #25
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	3301      	adds	r3, #1
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80031da:	683b      	ldr	r3, [r7, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40021000 	.word	0x40021000
 80031ec:	00f42400 	.word	0x00f42400
 80031f0:	08008480 	.word	0x08008480

080031f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031fc:	2300      	movs	r3, #0
 80031fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003200:	2300      	movs	r3, #0
 8003202:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800320c:	2b00      	cmp	r3, #0
 800320e:	d040      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003214:	2b80      	cmp	r3, #128	@ 0x80
 8003216:	d02a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003218:	2b80      	cmp	r3, #128	@ 0x80
 800321a:	d825      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800321c:	2b60      	cmp	r3, #96	@ 0x60
 800321e:	d026      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003220:	2b60      	cmp	r3, #96	@ 0x60
 8003222:	d821      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003224:	2b40      	cmp	r3, #64	@ 0x40
 8003226:	d006      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003228:	2b40      	cmp	r3, #64	@ 0x40
 800322a:	d81d      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d009      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003230:	2b20      	cmp	r3, #32
 8003232:	d010      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003234:	e018      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003236:	4b89      	ldr	r3, [pc, #548]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	4a88      	ldr	r2, [pc, #544]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003240:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003242:	e015      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f001 fa82 	bl	8004754 <RCCEx_PLLSAI1_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003254:	e00c      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3320      	adds	r3, #32
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f001 fb6d 	bl	800493c <RCCEx_PLLSAI2_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003266:	e003      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	74fb      	strb	r3, [r7, #19]
      break;
 800326c:	e000      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800326e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003276:	4b79      	ldr	r3, [pc, #484]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003278:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800327c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003284:	4975      	ldr	r1, [pc, #468]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800328c:	e001      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d047      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a6:	d030      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ac:	d82a      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032b2:	d02a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032b8:	d824      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032be:	d008      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80032c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032c4:	d81e      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80032ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ce:	d010      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032d0:	e018      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032d2:	4b62      	ldr	r3, [pc, #392]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	4a61      	ldr	r2, [pc, #388]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032dc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032de:	e015      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 fa34 	bl	8004754 <RCCEx_PLLSAI1_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032f0:	e00c      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3320      	adds	r3, #32
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f001 fb1f 	bl	800493c <RCCEx_PLLSAI2_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003302:	e003      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	74fb      	strb	r3, [r7, #19]
      break;
 8003308:	e000      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800330a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330c:	7cfb      	ldrb	r3, [r7, #19]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10b      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003312:	4b52      	ldr	r3, [pc, #328]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003314:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003318:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003320:	494e      	ldr	r1, [pc, #312]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003328:	e001      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 809f 	beq.w	800347a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333c:	2300      	movs	r3, #0
 800333e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003340:	4b46      	ldr	r3, [pc, #280]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003350:	2300      	movs	r3, #0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	4b41      	ldr	r3, [pc, #260]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335a:	4a40      	ldr	r2, [pc, #256]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003360:	6593      	str	r3, [r2, #88]	@ 0x58
 8003362:	4b3e      	ldr	r3, [pc, #248]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003372:	4b3b      	ldr	r3, [pc, #236]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a3a      	ldr	r2, [pc, #232]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800337c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800337e:	f7fe fa5b 	bl	8001838 <HAL_GetTick>
 8003382:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003384:	e009      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003386:	f7fe fa57 	bl	8001838 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d902      	bls.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	74fb      	strb	r3, [r7, #19]
        break;
 8003398:	e005      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800339a:	4b31      	ldr	r3, [pc, #196]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ef      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80033a6:	7cfb      	ldrb	r3, [r7, #19]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d15b      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ac:	4b2b      	ldr	r3, [pc, #172]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01f      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d019      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ca:	4b24      	ldr	r3, [pc, #144]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d6:	4b21      	ldr	r3, [pc, #132]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033dc:	4a1f      	ldr	r2, [pc, #124]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e6:	4b1d      	ldr	r3, [pc, #116]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ec:	4a1b      	ldr	r2, [pc, #108]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f6:	4a19      	ldr	r2, [pc, #100]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d016      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe fa16 	bl	8001838 <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340e:	e00b      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fe fa12 	bl	8001838 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d902      	bls.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	74fb      	strb	r3, [r7, #19]
            break;
 8003426:	e006      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003428:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ec      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10c      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800343c:	4b07      	ldr	r3, [pc, #28]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003442:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800344c:	4903      	ldr	r1, [pc, #12]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003454:	e008      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	74bb      	strb	r3, [r7, #18]
 800345a:	e005      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800345c:	40021000 	.word	0x40021000
 8003460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003468:	7c7b      	ldrb	r3, [r7, #17]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4ba0      	ldr	r3, [pc, #640]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003472:	4a9f      	ldr	r2, [pc, #636]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003478:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003486:	4b9a      	ldr	r3, [pc, #616]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348c:	f023 0203 	bic.w	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	4996      	ldr	r1, [pc, #600]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a8:	4b91      	ldr	r3, [pc, #580]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	f023 020c 	bic.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	498e      	ldr	r1, [pc, #568]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ca:	4b89      	ldr	r3, [pc, #548]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d8:	4985      	ldr	r1, [pc, #532]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ec:	4b80      	ldr	r3, [pc, #512]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034fa:	497d      	ldr	r1, [pc, #500]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350e:	4b78      	ldr	r3, [pc, #480]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351c:	4974      	ldr	r1, [pc, #464]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003530:	4b6f      	ldr	r3, [pc, #444]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003536:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353e:	496c      	ldr	r1, [pc, #432]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003552:	4b67      	ldr	r3, [pc, #412]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003558:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003560:	4963      	ldr	r1, [pc, #396]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003574:	4b5e      	ldr	r3, [pc, #376]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003582:	495b      	ldr	r1, [pc, #364]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003596:	4b56      	ldr	r3, [pc, #344]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	4952      	ldr	r1, [pc, #328]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b8:	4b4d      	ldr	r3, [pc, #308]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	494a      	ldr	r1, [pc, #296]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035da:	4b45      	ldr	r3, [pc, #276]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e8:	4941      	ldr	r1, [pc, #260]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035fc:	4b3c      	ldr	r3, [pc, #240]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003602:	f023 0203 	bic.w	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360a:	4939      	ldr	r1, [pc, #228]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d028      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800361e:	4b34      	ldr	r3, [pc, #208]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003624:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800362c:	4930      	ldr	r1, [pc, #192]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800363c:	d106      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363e:	4b2c      	ldr	r3, [pc, #176]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4a2b      	ldr	r2, [pc, #172]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003648:	60d3      	str	r3, [r2, #12]
 800364a:	e011      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003650:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003654:	d10c      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	2101      	movs	r1, #1
 800365c:	4618      	mov	r0, r3
 800365e:	f001 f879 	bl	8004754 <RCCEx_PLLSAI1_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800366c:	7cfb      	ldrb	r3, [r7, #19]
 800366e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d04d      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003684:	d108      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003686:	4b1a      	ldr	r3, [pc, #104]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003688:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800368c:	4a18      	ldr	r2, [pc, #96]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003692:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003696:	e012      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003698:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800369e:	4a14      	ldr	r2, [pc, #80]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036a4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80036a8:	4b11      	ldr	r3, [pc, #68]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036b6:	490e      	ldr	r1, [pc, #56]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036c6:	d106      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c8:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a08      	ldr	r2, [pc, #32]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036d2:	60d3      	str	r3, [r2, #12]
 80036d4:	e020      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036de:	d109      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036e0:	4b03      	ldr	r3, [pc, #12]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4a02      	ldr	r2, [pc, #8]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ea:	60d3      	str	r3, [r2, #12]
 80036ec:	e014      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036fc:	d10c      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	2101      	movs	r1, #1
 8003704:	4618      	mov	r0, r3
 8003706:	f001 f825 	bl	8004754 <RCCEx_PLLSAI1_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d028      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003724:	4b7a      	ldr	r3, [pc, #488]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003732:	4977      	ldr	r1, [pc, #476]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800373e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003742:	d106      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003744:	4b72      	ldr	r3, [pc, #456]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a71      	ldr	r2, [pc, #452]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800374a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800374e:	60d3      	str	r3, [r2, #12]
 8003750:	e011      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003756:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800375a:	d10c      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3304      	adds	r3, #4
 8003760:	2101      	movs	r1, #1
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fff6 	bl	8004754 <RCCEx_PLLSAI1_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d01e      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003782:	4b63      	ldr	r3, [pc, #396]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003788:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003792:	495f      	ldr	r1, [pc, #380]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2102      	movs	r1, #2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 ffd1 	bl	8004754 <RCCEx_PLLSAI1_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b6:	7cfb      	ldrb	r3, [r7, #19]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00b      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037cc:	4b50      	ldr	r3, [pc, #320]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037d2:	f023 0204 	bic.w	r2, r3, #4
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037dc:	494c      	ldr	r1, [pc, #304]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037f0:	4b47      	ldr	r3, [pc, #284]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037f6:	f023 0218 	bic.w	r2, r3, #24
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003800:	4943      	ldr	r1, [pc, #268]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d035      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003814:	4b3e      	ldr	r3, [pc, #248]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a3d      	ldr	r2, [pc, #244]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800381a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800381e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003820:	f7fe f80a 	bl	8001838 <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003826:	e009      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003828:	f7fe f806 	bl	8001838 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d902      	bls.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	74fb      	strb	r3, [r7, #19]
        break;
 800383a:	e005      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800383c:	4b34      	ldr	r3, [pc, #208]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ef      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d113      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800384e:	4b30      	ldr	r3, [pc, #192]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003850:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003854:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800385e:	492c      	ldr	r1, [pc, #176]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3320      	adds	r3, #32
 800386a:	2102      	movs	r1, #2
 800386c:	4618      	mov	r0, r3
 800386e:	f001 f865 	bl	800493c <RCCEx_PLLSAI2_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01e      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800388c:	4b20      	ldr	r3, [pc, #128]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800388e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003892:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389c:	491c      	ldr	r1, [pc, #112]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ae:	d10c      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3320      	adds	r3, #32
 80038b4:	2101      	movs	r1, #1
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 f840 	bl	800493c <RCCEx_PLLSAI2_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d017      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e6:	490a      	ldr	r1, [pc, #40]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038f8:	d105      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038fa:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	4a04      	ldr	r2, [pc, #16]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003900:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003904:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003906:	7cbb      	ldrb	r3, [r7, #18]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000

08003914 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003926:	d13e      	bne.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003928:	4bb6      	ldr	r3, [pc, #728]	@ (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003932:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800393a:	d028      	beq.n	800398e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003942:	f200 86f2 	bhi.w	800472a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800394c:	d005      	beq.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003954:	d00e      	beq.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003956:	f000 bee8 	b.w	800472a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800395a:	4baa      	ldr	r3, [pc, #680]	@ (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b02      	cmp	r3, #2
 8003966:	f040 86e2 	bne.w	800472e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 800396a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800396e:	61fb      	str	r3, [r7, #28]
      break;
 8003970:	f000 bedd 	b.w	800472e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003974:	4ba3      	ldr	r3, [pc, #652]	@ (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b02      	cmp	r3, #2
 8003980:	f040 86d7 	bne.w	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8003984:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003988:	61fb      	str	r3, [r7, #28]
      break;
 800398a:	f000 bed2 	b.w	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800398e:	4b9d      	ldr	r3, [pc, #628]	@ (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800399a:	f040 86cc 	bne.w	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 800399e:	4b9a      	ldr	r3, [pc, #616]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039a0:	61fb      	str	r3, [r7, #28]
      break;
 80039a2:	f000 bec8 	b.w	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a6:	4b97      	ldr	r3, [pc, #604]	@ (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d036      	beq.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d840      	bhi.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d003      	beq.n	80039ca <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d020      	beq.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80039c8:	e039      	b.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80039ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d116      	bne.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80039d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80039e2:	4b88      	ldr	r3, [pc, #544]	@ (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	e005      	b.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80039ee:	4b85      	ldr	r3, [pc, #532]	@ (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	4a84      	ldr	r2, [pc, #528]	@ (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80039fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003a02:	e01f      	b.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61bb      	str	r3, [r7, #24]
      break;
 8003a08:	e01c      	b.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a0a:	4b7e      	ldr	r3, [pc, #504]	@ (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a16:	d102      	bne.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003a18:	4b7d      	ldr	r3, [pc, #500]	@ (8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003a1a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003a1c:	e012      	b.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61bb      	str	r3, [r7, #24]
      break;
 8003a22:	e00f      	b.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003a24:	4b77      	ldr	r3, [pc, #476]	@ (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a30:	d102      	bne.n	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003a32:	4b77      	ldr	r3, [pc, #476]	@ (8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003a34:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003a36:	e005      	b.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]
      break;
 8003a3c:	e002      	b.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
      break;
 8003a42:	bf00      	nop
    }

    switch(PeriphClk)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a4a:	f000 8604 	beq.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a54:	f200 8671 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a5e:	f000 8467 	beq.w	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a68:	f200 8667 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a72:	f000 852f 	beq.w	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a7c:	f200 865d 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a86:	f000 8185 	beq.w	8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a90:	f200 8653 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a9a:	f000 80cb 	beq.w	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003aa4:	f200 8649 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aae:	f000 842e 	beq.w	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab8:	f200 863f 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ac2:	f000 83e2 	beq.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003acc:	f200 8635 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ad6:	f000 80ad 	beq.w	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ae0:	f200 862b 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aea:	f000 809b 	beq.w	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af4:	f200 8621 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003afe:	f000 8089 	beq.w	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b08:	f200 8617 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b12:	f000 8552 	beq.w	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1c:	f200 860d 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b26:	f000 84fe 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b30:	f200 8603 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b3a:	f000 849f 	beq.w	800447c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b44:	f200 85f9 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b80      	cmp	r3, #128	@ 0x80
 8003b4c:	f000 846a 	beq.w	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b80      	cmp	r3, #128	@ 0x80
 8003b54:	f200 85f1 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d84c      	bhi.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 85ea 	beq.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	2b1f      	cmp	r3, #31
 8003b6c:	f200 85e5 	bhi.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b70:	a201      	add	r2, pc, #4	@ (adr r2, 8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003f89 	.word	0x08003f89
 8003b7c:	08003ff7 	.word	0x08003ff7
 8003b80:	0800473b 	.word	0x0800473b
 8003b84:	0800408b 	.word	0x0800408b
 8003b88:	0800473b 	.word	0x0800473b
 8003b8c:	0800473b 	.word	0x0800473b
 8003b90:	0800473b 	.word	0x0800473b
 8003b94:	08004103 	.word	0x08004103
 8003b98:	0800473b 	.word	0x0800473b
 8003b9c:	0800473b 	.word	0x0800473b
 8003ba0:	0800473b 	.word	0x0800473b
 8003ba4:	0800473b 	.word	0x0800473b
 8003ba8:	0800473b 	.word	0x0800473b
 8003bac:	0800473b 	.word	0x0800473b
 8003bb0:	0800473b 	.word	0x0800473b
 8003bb4:	08004187 	.word	0x08004187
 8003bb8:	0800473b 	.word	0x0800473b
 8003bbc:	0800473b 	.word	0x0800473b
 8003bc0:	0800473b 	.word	0x0800473b
 8003bc4:	0800473b 	.word	0x0800473b
 8003bc8:	0800473b 	.word	0x0800473b
 8003bcc:	0800473b 	.word	0x0800473b
 8003bd0:	0800473b 	.word	0x0800473b
 8003bd4:	0800473b 	.word	0x0800473b
 8003bd8:	0800473b 	.word	0x0800473b
 8003bdc:	0800473b 	.word	0x0800473b
 8003be0:	0800473b 	.word	0x0800473b
 8003be4:	0800473b 	.word	0x0800473b
 8003be8:	0800473b 	.word	0x0800473b
 8003bec:	0800473b 	.word	0x0800473b
 8003bf0:	0800473b 	.word	0x0800473b
 8003bf4:	08004209 	.word	0x08004209
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b40      	cmp	r3, #64	@ 0x40
 8003bfc:	f000 83e6 	beq.w	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003c00:	f000 bd9b 	b.w	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c04:	40021000 	.word	0x40021000
 8003c08:	0007a120 	.word	0x0007a120
 8003c0c:	08008480 	.word	0x08008480
 8003c10:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003c14:	69b9      	ldr	r1, [r7, #24]
 8003c16:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003c1a:	f000 ff83 	bl	8004b24 <RCCEx_GetSAIxPeriphCLKFreq>
 8003c1e:	61f8      	str	r0, [r7, #28]
      break;
 8003c20:	f000 bd8e 	b.w	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003c24:	69b9      	ldr	r1, [r7, #24]
 8003c26:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003c2a:	f000 ff7b 	bl	8004b24 <RCCEx_GetSAIxPeriphCLKFreq>
 8003c2e:	61f8      	str	r0, [r7, #28]
      break;
 8003c30:	f000 bd86 	b.w	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003c34:	4b9a      	ldr	r3, [pc, #616]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003c3e:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003c46:	d015      	beq.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003c4e:	f200 8092 	bhi.w	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c58:	d029      	beq.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c60:	f200 8089 	bhi.w	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d07b      	beq.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c70:	d04a      	beq.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003c72:	e080      	b.n	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003c74:	4b8a      	ldr	r3, [pc, #552]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d17d      	bne.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c80:	4b87      	ldr	r3, [pc, #540]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003c8c:	4b84      	ldr	r3, [pc, #528]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	e005      	b.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003c98:	4b81      	ldr	r3, [pc, #516]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003caa:	61fb      	str	r3, [r7, #28]
          break;
 8003cac:	e066      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003cae:	4b7c      	ldr	r3, [pc, #496]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cba:	d162      	bne.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003cbc:	4b78      	ldr	r3, [pc, #480]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cc8:	d15b      	bne.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003cca:	4b75      	ldr	r3, [pc, #468]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cd4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	fb03 f202 	mul.w	r2, r3, r2
 8003cde:	4b70      	ldr	r3, [pc, #448]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	3301      	adds	r3, #1
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003cf0:	4b6b      	ldr	r3, [pc, #428]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0d5b      	lsrs	r3, r3, #21
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	61fb      	str	r3, [r7, #28]
          break;
 8003d06:	e03c      	b.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003d08:	4b65      	ldr	r3, [pc, #404]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d14:	d138      	bne.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003d16:	4b62      	ldr	r3, [pc, #392]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d22:	d131      	bne.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003d24:	4b5e      	ldr	r3, [pc, #376]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d2e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	fb03 f202 	mul.w	r2, r3, r2
 8003d38:	4b59      	ldr	r3, [pc, #356]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	3301      	adds	r3, #1
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003d4a:	4b55      	ldr	r3, [pc, #340]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	0d5b      	lsrs	r3, r3, #21
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	3301      	adds	r3, #1
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5e:	61fb      	str	r3, [r7, #28]
          break;
 8003d60:	e012      	b.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003d62:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d10e      	bne.n	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8003d70:	4b4d      	ldr	r3, [pc, #308]	@ (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003d72:	61fb      	str	r3, [r7, #28]
          break;
 8003d74:	e00b      	b.n	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8003d76:	bf00      	nop
 8003d78:	f000 bce2 	b.w	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d7c:	bf00      	nop
 8003d7e:	f000 bcdf 	b.w	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d82:	bf00      	nop
 8003d84:	f000 bcdc 	b.w	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d88:	bf00      	nop
 8003d8a:	f000 bcd9 	b.w	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d8e:	bf00      	nop
        break;
 8003d90:	f000 bcd6 	b.w	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003d94:	4b42      	ldr	r3, [pc, #264]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003da2:	d13d      	bne.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003da4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003db0:	f040 84c5 	bne.w	800473e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003db4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc0:	f040 84bd 	bne.w	800473e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003dc4:	4b36      	ldr	r3, [pc, #216]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dce:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	fb03 f202 	mul.w	r2, r3, r2
 8003dd8:	4b31      	ldr	r3, [pc, #196]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	3301      	adds	r3, #1
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003dea:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	0edb      	lsrs	r3, r3, #27
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003dfc:	4b28      	ldr	r3, [pc, #160]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8003e08:	2311      	movs	r3, #17
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e001      	b.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8003e0e:	2307      	movs	r3, #7
 8003e10:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	61fb      	str	r3, [r7, #28]
      break;
 8003e1c:	f000 bc8f 	b.w	800473e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003e20:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003e2a:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003e32:	d016      	beq.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003e3a:	f200 809b 	bhi.w	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e44:	d032      	beq.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e4c:	f200 8092 	bhi.w	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8084 	beq.w	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e5e:	d052      	beq.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8003e60:	e088      	b.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003e62:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	f040 8084 	bne.w	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003e70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003e7c:	4b08      	ldr	r3, [pc, #32]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	e005      	b.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003e88:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	4a03      	ldr	r2, [pc, #12]	@ (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9a:	61fb      	str	r3, [r7, #28]
          break;
 8003e9c:	e06c      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	08008480 	.word	0x08008480
 8003ea8:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003eac:	4ba5      	ldr	r3, [pc, #660]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003eb8:	d160      	bne.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003eba:	4ba2      	ldr	r3, [pc, #648]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ec6:	d159      	bne.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003ec8:	4b9e      	ldr	r3, [pc, #632]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	0a1b      	lsrs	r3, r3, #8
 8003ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ed2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	fb03 f202 	mul.w	r2, r3, r2
 8003edc:	4b99      	ldr	r3, [pc, #612]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003eee:	4b95      	ldr	r3, [pc, #596]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	0d5b      	lsrs	r3, r3, #21
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f02:	61fb      	str	r3, [r7, #28]
          break;
 8003f04:	e03a      	b.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003f06:	4b8f      	ldr	r3, [pc, #572]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f12:	d135      	bne.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003f14:	4b8b      	ldr	r3, [pc, #556]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f20:	d12e      	bne.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003f22:	4b88      	ldr	r3, [pc, #544]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f2c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	fb03 f202 	mul.w	r2, r3, r2
 8003f36:	4b83      	ldr	r3, [pc, #524]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	3301      	adds	r3, #1
 8003f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f46:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003f48:	4b7e      	ldr	r3, [pc, #504]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	0d5b      	lsrs	r3, r3, #21
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	3301      	adds	r3, #1
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	61fb      	str	r3, [r7, #28]
          break;
 8003f5e:	e00f      	b.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003f60:	4b78      	ldr	r3, [pc, #480]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d10a      	bne.n	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8003f6e:	4b76      	ldr	r3, [pc, #472]	@ (8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8003f70:	61fb      	str	r3, [r7, #28]
          break;
 8003f72:	e007      	b.n	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8003f74:	bf00      	nop
 8003f76:	e3e2      	b.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f78:	bf00      	nop
 8003f7a:	e3e0      	b.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f7c:	bf00      	nop
 8003f7e:	e3de      	b.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f80:	bf00      	nop
 8003f82:	e3dc      	b.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f84:	bf00      	nop
      break;
 8003f86:	e3da      	b.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003f88:	4b6e      	ldr	r3, [pc, #440]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d827      	bhi.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8003f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fb1 	.word	0x08003fb1
 8003fa4:	08003fb9 	.word	0x08003fb9
 8003fa8:	08003fc1 	.word	0x08003fc1
 8003fac:	08003fd5 	.word	0x08003fd5
          frequency = HAL_RCC_GetPCLK2Freq();
 8003fb0:	f7ff f84c 	bl	800304c <HAL_RCC_GetPCLK2Freq>
 8003fb4:	61f8      	str	r0, [r7, #28]
          break;
 8003fb6:	e01d      	b.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fb8:	f7fe ff9c 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8003fbc:	61f8      	str	r0, [r7, #28]
          break;
 8003fbe:	e019      	b.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fc0:	4b60      	ldr	r3, [pc, #384]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fcc:	d10f      	bne.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8003fce:	4b5f      	ldr	r3, [pc, #380]	@ (800414c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003fd0:	61fb      	str	r3, [r7, #28]
          break;
 8003fd2:	e00c      	b.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8003fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fe6:	61fb      	str	r3, [r7, #28]
          break;
 8003fe8:	e003      	b.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8003fea:	bf00      	nop
 8003fec:	e3a8      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003fee:	bf00      	nop
 8003ff0:	e3a6      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003ff2:	bf00      	nop
        break;
 8003ff4:	e3a4      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003ff6:	4b53      	ldr	r3, [pc, #332]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d83a      	bhi.n	800407e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8004008:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004045 	.word	0x08004045
 8004014:	0800407f 	.word	0x0800407f
 8004018:	0800407f 	.word	0x0800407f
 800401c:	0800407f 	.word	0x0800407f
 8004020:	0800404d 	.word	0x0800404d
 8004024:	0800407f 	.word	0x0800407f
 8004028:	0800407f 	.word	0x0800407f
 800402c:	0800407f 	.word	0x0800407f
 8004030:	08004055 	.word	0x08004055
 8004034:	0800407f 	.word	0x0800407f
 8004038:	0800407f 	.word	0x0800407f
 800403c:	0800407f 	.word	0x0800407f
 8004040:	08004069 	.word	0x08004069
          frequency = HAL_RCC_GetPCLK1Freq();
 8004044:	f7fe ffec 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 8004048:	61f8      	str	r0, [r7, #28]
          break;
 800404a:	e01d      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 800404c:	f7fe ff52 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8004050:	61f8      	str	r0, [r7, #28]
          break;
 8004052:	e019      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004054:	4b3b      	ldr	r3, [pc, #236]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800405c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004060:	d10f      	bne.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8004062:	4b3a      	ldr	r3, [pc, #232]	@ (800414c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004064:	61fb      	str	r3, [r7, #28]
          break;
 8004066:	e00c      	b.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004068:	4b36      	ldr	r3, [pc, #216]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b02      	cmp	r3, #2
 8004074:	d107      	bne.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8004076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800407a:	61fb      	str	r3, [r7, #28]
          break;
 800407c:	e003      	b.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800407e:	bf00      	nop
 8004080:	e35e      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004082:	bf00      	nop
 8004084:	e35c      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004086:	bf00      	nop
        break;
 8004088:	e35a      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800408a:	4b2e      	ldr	r3, [pc, #184]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004090:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004094:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b30      	cmp	r3, #48	@ 0x30
 800409a:	d021      	beq.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b30      	cmp	r3, #48	@ 0x30
 80040a0:	d829      	bhi.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d011      	beq.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d823      	bhi.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d004      	beq.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 80040ba:	e01c      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040bc:	f7fe ffb0 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 80040c0:	61f8      	str	r0, [r7, #28]
          break;
 80040c2:	e01d      	b.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 80040c4:	f7fe ff16 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 80040c8:	61f8      	str	r0, [r7, #28]
          break;
 80040ca:	e019      	b.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d8:	d10f      	bne.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 80040da:	4b1c      	ldr	r3, [pc, #112]	@ (800414c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80040dc:	61fb      	str	r3, [r7, #28]
          break;
 80040de:	e00c      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040e0:	4b18      	ldr	r3, [pc, #96]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d107      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80040ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040f2:	61fb      	str	r3, [r7, #28]
          break;
 80040f4:	e003      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80040f6:	bf00      	nop
 80040f8:	e322      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040fa:	bf00      	nop
 80040fc:	e320      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040fe:	bf00      	nop
        break;
 8004100:	e31e      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004102:	4b10      	ldr	r3, [pc, #64]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800410c:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2bc0      	cmp	r3, #192	@ 0xc0
 8004112:	d027      	beq.n	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2bc0      	cmp	r3, #192	@ 0xc0
 8004118:	d82f      	bhi.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b80      	cmp	r3, #128	@ 0x80
 800411e:	d017      	beq.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b80      	cmp	r3, #128	@ 0x80
 8004124:	d829      	bhi.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b40      	cmp	r3, #64	@ 0x40
 8004130:	d004      	beq.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8004132:	e022      	b.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004134:	f7fe ff74 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 8004138:	61f8      	str	r0, [r7, #28]
          break;
 800413a:	e023      	b.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 800413c:	f7fe feda 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8004140:	61f8      	str	r0, [r7, #28]
          break;
 8004142:	e01f      	b.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8004144:	40021000 	.word	0x40021000
 8004148:	02dc6c00 	.word	0x02dc6c00
 800414c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004150:	4b9b      	ldr	r3, [pc, #620]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415c:	d10f      	bne.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 800415e:	4b99      	ldr	r3, [pc, #612]	@ (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004160:	61fb      	str	r3, [r7, #28]
          break;
 8004162:	e00c      	b.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004164:	4b96      	ldr	r3, [pc, #600]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b02      	cmp	r3, #2
 8004170:	d107      	bne.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8004172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004176:	61fb      	str	r3, [r7, #28]
          break;
 8004178:	e003      	b.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800417a:	bf00      	nop
 800417c:	e2e0      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800417e:	bf00      	nop
 8004180:	e2de      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004182:	bf00      	nop
        break;
 8004184:	e2dc      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004186:	4b8e      	ldr	r3, [pc, #568]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004190:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004198:	d025      	beq.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a0:	d82c      	bhi.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a8:	d013      	beq.n	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b0:	d824      	bhi.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041be:	d004      	beq.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 80041c0:	e01c      	b.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041c2:	f7fe ff2d 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 80041c6:	61f8      	str	r0, [r7, #28]
          break;
 80041c8:	e01d      	b.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80041ca:	f7fe fe93 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 80041ce:	61f8      	str	r0, [r7, #28]
          break;
 80041d0:	e019      	b.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041d2:	4b7b      	ldr	r3, [pc, #492]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041de:	d10f      	bne.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 80041e0:	4b78      	ldr	r3, [pc, #480]	@ (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80041e2:	61fb      	str	r3, [r7, #28]
          break;
 80041e4:	e00c      	b.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041e6:	4b76      	ldr	r3, [pc, #472]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d107      	bne.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 80041f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041f8:	61fb      	str	r3, [r7, #28]
          break;
 80041fa:	e003      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80041fc:	bf00      	nop
 80041fe:	e29f      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004200:	bf00      	nop
 8004202:	e29d      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004204:	bf00      	nop
        break;
 8004206:	e29b      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004208:	4b6d      	ldr	r3, [pc, #436]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004212:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800421a:	d025      	beq.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004222:	d82c      	bhi.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800422a:	d013      	beq.n	8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004232:	d824      	bhi.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004240:	d004      	beq.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8004242:	e01c      	b.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004244:	f7fe feec 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 8004248:	61f8      	str	r0, [r7, #28]
          break;
 800424a:	e01d      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 800424c:	f7fe fe52 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8004250:	61f8      	str	r0, [r7, #28]
          break;
 8004252:	e019      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004254:	4b5a      	ldr	r3, [pc, #360]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004260:	d10f      	bne.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8004262:	4b58      	ldr	r3, [pc, #352]	@ (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004264:	61fb      	str	r3, [r7, #28]
          break;
 8004266:	e00c      	b.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004268:	4b55      	ldr	r3, [pc, #340]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b02      	cmp	r3, #2
 8004274:	d107      	bne.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8004276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800427a:	61fb      	str	r3, [r7, #28]
          break;
 800427c:	e003      	b.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 800427e:	bf00      	nop
 8004280:	e25e      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004282:	bf00      	nop
 8004284:	e25c      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004286:	bf00      	nop
        break;
 8004288:	e25a      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800428a:	4b4d      	ldr	r3, [pc, #308]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004290:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004294:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800429c:	d007      	beq.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042a4:	d12f      	bne.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80042a6:	f7fe fe25 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 80042aa:	61f8      	str	r0, [r7, #28]
          break;
 80042ac:	e02e      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80042ae:	4b44      	ldr	r3, [pc, #272]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ba:	d126      	bne.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 80042bc:	4b40      	ldr	r3, [pc, #256]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d020      	beq.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80042c8:	4b3d      	ldr	r3, [pc, #244]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042d2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	fb03 f202 	mul.w	r2, r3, r2
 80042dc:	4b38      	ldr	r3, [pc, #224]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	3301      	adds	r3, #1
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80042ee:	4b34      	ldr	r3, [pc, #208]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	0e5b      	lsrs	r3, r3, #25
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	3301      	adds	r3, #1
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004302:	61fb      	str	r3, [r7, #28]
          break;
 8004304:	e001      	b.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8004306:	bf00      	nop
 8004308:	e21a      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800430a:	bf00      	nop
        break;
 800430c:	e218      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800430e:	4b2c      	ldr	r3, [pc, #176]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004310:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004320:	f7fe fe94 	bl	800304c <HAL_RCC_GetPCLK2Freq>
 8004324:	61f8      	str	r0, [r7, #28]
        break;
 8004326:	e20b      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004328:	f7fe fde4 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 800432c:	61f8      	str	r0, [r7, #28]
        break;
 800432e:	e207      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004330:	4b23      	ldr	r3, [pc, #140]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004332:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004336:	f003 0318 	and.w	r3, r3, #24
 800433a:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b10      	cmp	r3, #16
 8004340:	d010      	beq.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b10      	cmp	r3, #16
 8004346:	d834      	bhi.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d024      	beq.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8004354:	e02d      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004356:	69b9      	ldr	r1, [r7, #24]
 8004358:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800435c:	f000 fbe2 	bl	8004b24 <RCCEx_GetSAIxPeriphCLKFreq>
 8004360:	61f8      	str	r0, [r7, #28]
          break;
 8004362:	e02b      	b.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004364:	4b16      	ldr	r3, [pc, #88]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b02      	cmp	r3, #2
 800436e:	d122      	bne.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004370:	4b13      	ldr	r3, [pc, #76]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800437c:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	e005      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004388:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800438a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	4a0c      	ldr	r2, [pc, #48]	@ (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439a:	61fb      	str	r3, [r7, #28]
          break;
 800439c:	e00b      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800439e:	4b08      	ldr	r3, [pc, #32]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043aa:	d106      	bne.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 80043ac:	4b05      	ldr	r3, [pc, #20]	@ (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80043ae:	61fb      	str	r3, [r7, #28]
          break;
 80043b0:	e003      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 80043b2:	bf00      	nop
 80043b4:	e1c4      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043b6:	bf00      	nop
 80043b8:	e1c2      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043ba:	bf00      	nop
        break;
 80043bc:	e1c0      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000
 80043c4:	00f42400 	.word	0x00f42400
 80043c8:	08008480 	.word	0x08008480
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80043cc:	4b96      	ldr	r3, [pc, #600]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80043d6:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043de:	d013      	beq.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043e6:	d819      	bhi.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f4:	d004      	beq.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 80043f6:	e011      	b.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7fe fe12 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 80043fc:	61f8      	str	r0, [r7, #28]
          break;
 80043fe:	e010      	b.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004400:	f7fe fd78 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8004404:	61f8      	str	r0, [r7, #28]
          break;
 8004406:	e00c      	b.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004408:	4b87      	ldr	r3, [pc, #540]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004414:	d104      	bne.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8004416:	4b85      	ldr	r3, [pc, #532]	@ (800462c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004418:	61fb      	str	r3, [r7, #28]
          break;
 800441a:	e001      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800441c:	bf00      	nop
 800441e:	e18f      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004420:	bf00      	nop
        break;
 8004422:	e18d      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004424:	4b80      	ldr	r3, [pc, #512]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800442e:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004436:	d013      	beq.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800443e:	d819      	bhi.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d004      	beq.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800444c:	d004      	beq.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800444e:	e011      	b.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004450:	f7fe fde6 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 8004454:	61f8      	str	r0, [r7, #28]
          break;
 8004456:	e010      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8004458:	f7fe fd4c 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 800445c:	61f8      	str	r0, [r7, #28]
          break;
 800445e:	e00c      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004460:	4b71      	ldr	r3, [pc, #452]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800446c:	d104      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 800446e:	4b6f      	ldr	r3, [pc, #444]	@ (800462c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004470:	61fb      	str	r3, [r7, #28]
          break;
 8004472:	e001      	b.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8004474:	bf00      	nop
 8004476:	e163      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004478:	bf00      	nop
        break;
 800447a:	e161      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800447c:	4b6a      	ldr	r3, [pc, #424]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004482:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004486:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800448e:	d013      	beq.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004496:	d819      	bhi.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d004      	beq.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a4:	d004      	beq.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 80044a6:	e011      	b.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044a8:	f7fe fdba 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 80044ac:	61f8      	str	r0, [r7, #28]
          break;
 80044ae:	e010      	b.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 80044b0:	f7fe fd20 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 80044b4:	61f8      	str	r0, [r7, #28]
          break;
 80044b6:	e00c      	b.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c4:	d104      	bne.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 80044c6:	4b59      	ldr	r3, [pc, #356]	@ (800462c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80044c8:	61fb      	str	r3, [r7, #28]
          break;
 80044ca:	e001      	b.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 80044cc:	bf00      	nop
 80044ce:	e137      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044d0:	bf00      	nop
        break;
 80044d2:	e135      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80044d4:	4b54      	ldr	r3, [pc, #336]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d011      	beq.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d818      	bhi.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d004      	beq.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 80044f8:	e011      	b.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044fa:	f7fe fd91 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 80044fe:	61f8      	str	r0, [r7, #28]
          break;
 8004500:	e010      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8004502:	f7fe fcf7 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8004506:	61f8      	str	r0, [r7, #28]
          break;
 8004508:	e00c      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800450a:	4b47      	ldr	r3, [pc, #284]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004516:	d104      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8004518:	4b44      	ldr	r3, [pc, #272]	@ (800462c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800451a:	61fb      	str	r3, [r7, #28]
          break;
 800451c:	e001      	b.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 800451e:	bf00      	nop
 8004520:	e10e      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004522:	bf00      	nop
        break;
 8004524:	e10c      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004526:	4b40      	ldr	r3, [pc, #256]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004530:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004538:	d02c      	beq.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004540:	d833      	bhi.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004548:	d01a      	beq.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004550:	d82b      	bhi.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800455e:	d004      	beq.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8004560:	e023      	b.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004562:	f7fe fd5d 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 8004566:	61f8      	str	r0, [r7, #28]
          break;
 8004568:	e026      	b.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800456a:	4b2f      	ldr	r3, [pc, #188]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800456c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	d11a      	bne.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8004578:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800457c:	61fb      	str	r3, [r7, #28]
          break;
 800457e:	e016      	b.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004580:	4b29      	ldr	r3, [pc, #164]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458c:	d111      	bne.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 800458e:	4b27      	ldr	r3, [pc, #156]	@ (800462c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004590:	61fb      	str	r3, [r7, #28]
          break;
 8004592:	e00e      	b.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004594:	4b24      	ldr	r3, [pc, #144]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d109      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 80045a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045a6:	61fb      	str	r3, [r7, #28]
          break;
 80045a8:	e005      	b.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 80045aa:	bf00      	nop
 80045ac:	e0c8      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045ae:	bf00      	nop
 80045b0:	e0c6      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045b2:	bf00      	nop
 80045b4:	e0c4      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045b6:	bf00      	nop
        break;
 80045b8:	e0c2      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80045ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80045c4:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045cc:	d030      	beq.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045d4:	d837      	bhi.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045dc:	d01a      	beq.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045e4:	d82f      	bhi.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f2:	d004      	beq.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 80045f4:	e027      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045f6:	f7fe fd13 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 80045fa:	61f8      	str	r0, [r7, #28]
          break;
 80045fc:	e02a      	b.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80045fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b02      	cmp	r3, #2
 800460a:	d11e      	bne.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 800460c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004610:	61fb      	str	r3, [r7, #28]
          break;
 8004612:	e01a      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004614:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800461c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004620:	d115      	bne.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8004622:	4b02      	ldr	r3, [pc, #8]	@ (800462c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004624:	61fb      	str	r3, [r7, #28]
          break;
 8004626:	e012      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004628:	40021000 	.word	0x40021000
 800462c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004630:	4b46      	ldr	r3, [pc, #280]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b02      	cmp	r3, #2
 800463c:	d109      	bne.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 800463e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004642:	61fb      	str	r3, [r7, #28]
          break;
 8004644:	e005      	b.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8004646:	bf00      	nop
 8004648:	e07a      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800464a:	bf00      	nop
 800464c:	e078      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800464e:	bf00      	nop
 8004650:	e076      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004652:	bf00      	nop
        break;
 8004654:	e074      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004656:	4b3d      	ldr	r3, [pc, #244]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004658:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800465c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004660:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004668:	d02c      	beq.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004670:	d855      	bhi.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d004      	beq.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800467e:	d004      	beq.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004680:	e04d      	b.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004682:	f7fe fc37 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8004686:	61f8      	str	r0, [r7, #28]
          break;
 8004688:	e04e      	b.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800468a:	4b30      	ldr	r3, [pc, #192]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b02      	cmp	r3, #2
 8004694:	d145      	bne.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004696:	4b2d      	ldr	r3, [pc, #180]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80046a2:	4b2a      	ldr	r3, [pc, #168]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	e005      	b.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 80046ae:	4b27      	ldr	r3, [pc, #156]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80046b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b4:	0a1b      	lsrs	r3, r3, #8
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	4a25      	ldr	r2, [pc, #148]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80046bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c0:	61fb      	str	r3, [r7, #28]
          break;
 80046c2:	e02e      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80046c4:	4b21      	ldr	r3, [pc, #132]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046d0:	d129      	bne.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80046d2:	4b1e      	ldr	r3, [pc, #120]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046de:	d122      	bne.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80046e0:	4b1a      	ldr	r3, [pc, #104]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	0a1b      	lsrs	r3, r3, #8
 80046e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ea:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	fb03 f202 	mul.w	r2, r3, r2
 80046f4:	4b15      	ldr	r3, [pc, #84]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	3301      	adds	r3, #1
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004706:	4b11      	ldr	r3, [pc, #68]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	0d5b      	lsrs	r3, r3, #21
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	3301      	adds	r3, #1
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	61fb      	str	r3, [r7, #28]
          break;
 800471c:	e003      	b.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 800471e:	bf00      	nop
 8004720:	e00e      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004722:	bf00      	nop
 8004724:	e00c      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004726:	bf00      	nop
        break;
 8004728:	e00a      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800472a:	bf00      	nop
 800472c:	e008      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800472e:	bf00      	nop
 8004730:	e006      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004732:	bf00      	nop
 8004734:	e004      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004736:	bf00      	nop
 8004738:	e002      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800473e:	bf00      	nop
    }
  }

  return(frequency);
 8004740:	69fb      	ldr	r3, [r7, #28]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
 8004750:	08008480 	.word	0x08008480

08004754 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004762:	4b72      	ldr	r3, [pc, #456]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00e      	beq.n	800478c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800476e:	4b6f      	ldr	r3, [pc, #444]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0203 	and.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d103      	bne.n	8004786 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
       ||
 8004782:	2b00      	cmp	r3, #0
 8004784:	d142      	bne.n	800480c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
 800478a:	e03f      	b.n	800480c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d018      	beq.n	80047c6 <RCCEx_PLLSAI1_Config+0x72>
 8004794:	2b03      	cmp	r3, #3
 8004796:	d825      	bhi.n	80047e4 <RCCEx_PLLSAI1_Config+0x90>
 8004798:	2b01      	cmp	r3, #1
 800479a:	d002      	beq.n	80047a2 <RCCEx_PLLSAI1_Config+0x4e>
 800479c:	2b02      	cmp	r3, #2
 800479e:	d009      	beq.n	80047b4 <RCCEx_PLLSAI1_Config+0x60>
 80047a0:	e020      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047a2:	4b62      	ldr	r3, [pc, #392]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d11d      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b2:	e01a      	b.n	80047ea <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047b4:	4b5d      	ldr	r3, [pc, #372]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d116      	bne.n	80047ee <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c4:	e013      	b.n	80047ee <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047c6:	4b59      	ldr	r3, [pc, #356]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10f      	bne.n	80047f2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047d2:	4b56      	ldr	r3, [pc, #344]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047e2:	e006      	b.n	80047f2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
      break;
 80047e8:	e004      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047ea:	bf00      	nop
 80047ec:	e002      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047ee:	bf00      	nop
 80047f0:	e000      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d108      	bne.n	800480c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80047fa:	4b4c      	ldr	r3, [pc, #304]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f023 0203 	bic.w	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4949      	ldr	r1, [pc, #292]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004808:	4313      	orrs	r3, r2
 800480a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f040 8086 	bne.w	8004920 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004814:	4b45      	ldr	r3, [pc, #276]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a44      	ldr	r2, [pc, #272]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 800481a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800481e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004820:	f7fd f80a 	bl	8001838 <HAL_GetTick>
 8004824:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004826:	e009      	b.n	800483c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004828:	f7fd f806 	bl	8001838 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d902      	bls.n	800483c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	73fb      	strb	r3, [r7, #15]
        break;
 800483a:	e005      	b.n	8004848 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800483c:	4b3b      	ldr	r3, [pc, #236]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1ef      	bne.n	8004828 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d168      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d113      	bne.n	800487c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004854:	4b35      	ldr	r3, [pc, #212]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	4b35      	ldr	r3, [pc, #212]	@ (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 800485a:	4013      	ands	r3, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6892      	ldr	r2, [r2, #8]
 8004860:	0211      	lsls	r1, r2, #8
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68d2      	ldr	r2, [r2, #12]
 8004866:	06d2      	lsls	r2, r2, #27
 8004868:	4311      	orrs	r1, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6852      	ldr	r2, [r2, #4]
 800486e:	3a01      	subs	r2, #1
 8004870:	0112      	lsls	r2, r2, #4
 8004872:	430a      	orrs	r2, r1
 8004874:	492d      	ldr	r1, [pc, #180]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004876:	4313      	orrs	r3, r2
 8004878:	610b      	str	r3, [r1, #16]
 800487a:	e02d      	b.n	80048d8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d115      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004882:	4b2a      	ldr	r3, [pc, #168]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	4b2b      	ldr	r3, [pc, #172]	@ (8004934 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004888:	4013      	ands	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6892      	ldr	r2, [r2, #8]
 800488e:	0211      	lsls	r1, r2, #8
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6912      	ldr	r2, [r2, #16]
 8004894:	0852      	lsrs	r2, r2, #1
 8004896:	3a01      	subs	r2, #1
 8004898:	0552      	lsls	r2, r2, #21
 800489a:	4311      	orrs	r1, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6852      	ldr	r2, [r2, #4]
 80048a0:	3a01      	subs	r2, #1
 80048a2:	0112      	lsls	r2, r2, #4
 80048a4:	430a      	orrs	r2, r1
 80048a6:	4921      	ldr	r1, [pc, #132]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	610b      	str	r3, [r1, #16]
 80048ac:	e014      	b.n	80048d8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ae:	4b1f      	ldr	r3, [pc, #124]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	4b21      	ldr	r3, [pc, #132]	@ (8004938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6892      	ldr	r2, [r2, #8]
 80048ba:	0211      	lsls	r1, r2, #8
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6952      	ldr	r2, [r2, #20]
 80048c0:	0852      	lsrs	r2, r2, #1
 80048c2:	3a01      	subs	r2, #1
 80048c4:	0652      	lsls	r2, r2, #25
 80048c6:	4311      	orrs	r1, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6852      	ldr	r2, [r2, #4]
 80048cc:	3a01      	subs	r2, #1
 80048ce:	0112      	lsls	r2, r2, #4
 80048d0:	430a      	orrs	r2, r1
 80048d2:	4916      	ldr	r1, [pc, #88]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048d8:	4b14      	ldr	r3, [pc, #80]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a13      	ldr	r2, [pc, #76]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 80048de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fc ffa8 	bl	8001838 <HAL_GetTick>
 80048e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ea:	e009      	b.n	8004900 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ec:	f7fc ffa4 	bl	8001838 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d902      	bls.n	8004900 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	73fb      	strb	r3, [r7, #15]
          break;
 80048fe:	e005      	b.n	800490c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004900:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0ef      	beq.n	80048ec <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004912:	4b06      	ldr	r3, [pc, #24]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	4904      	ldr	r1, [pc, #16]	@ (800492c <RCCEx_PLLSAI1_Config+0x1d8>)
 800491c:	4313      	orrs	r3, r2
 800491e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40021000 	.word	0x40021000
 8004930:	07ff800f 	.word	0x07ff800f
 8004934:	ff9f800f 	.word	0xff9f800f
 8004938:	f9ff800f 	.word	0xf9ff800f

0800493c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800494a:	4b72      	ldr	r3, [pc, #456]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00e      	beq.n	8004974 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004956:	4b6f      	ldr	r3, [pc, #444]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f003 0203 	and.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d103      	bne.n	800496e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
       ||
 800496a:	2b00      	cmp	r3, #0
 800496c:	d142      	bne.n	80049f4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
 8004972:	e03f      	b.n	80049f4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b03      	cmp	r3, #3
 800497a:	d018      	beq.n	80049ae <RCCEx_PLLSAI2_Config+0x72>
 800497c:	2b03      	cmp	r3, #3
 800497e:	d825      	bhi.n	80049cc <RCCEx_PLLSAI2_Config+0x90>
 8004980:	2b01      	cmp	r3, #1
 8004982:	d002      	beq.n	800498a <RCCEx_PLLSAI2_Config+0x4e>
 8004984:	2b02      	cmp	r3, #2
 8004986:	d009      	beq.n	800499c <RCCEx_PLLSAI2_Config+0x60>
 8004988:	e020      	b.n	80049cc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800498a:	4b62      	ldr	r3, [pc, #392]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d11d      	bne.n	80049d2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800499a:	e01a      	b.n	80049d2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800499c:	4b5d      	ldr	r3, [pc, #372]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d116      	bne.n	80049d6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ac:	e013      	b.n	80049d6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049ae:	4b59      	ldr	r3, [pc, #356]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10f      	bne.n	80049da <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ba:	4b56      	ldr	r3, [pc, #344]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ca:	e006      	b.n	80049da <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
      break;
 80049d0:	e004      	b.n	80049dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049d2:	bf00      	nop
 80049d4:	e002      	b.n	80049dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049da:	bf00      	nop
    }

    if(status == HAL_OK)
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d108      	bne.n	80049f4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80049e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f023 0203 	bic.w	r2, r3, #3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4949      	ldr	r1, [pc, #292]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f040 8086 	bne.w	8004b08 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049fc:	4b45      	ldr	r3, [pc, #276]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a44      	ldr	r2, [pc, #272]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a08:	f7fc ff16 	bl	8001838 <HAL_GetTick>
 8004a0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a0e:	e009      	b.n	8004a24 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a10:	f7fc ff12 	bl	8001838 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d902      	bls.n	8004a24 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	73fb      	strb	r3, [r7, #15]
        break;
 8004a22:	e005      	b.n	8004a30 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a24:	4b3b      	ldr	r3, [pc, #236]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1ef      	bne.n	8004a10 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d168      	bne.n	8004b08 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d113      	bne.n	8004a64 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a3c:	4b35      	ldr	r3, [pc, #212]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	4b35      	ldr	r3, [pc, #212]	@ (8004b18 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6892      	ldr	r2, [r2, #8]
 8004a48:	0211      	lsls	r1, r2, #8
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68d2      	ldr	r2, [r2, #12]
 8004a4e:	06d2      	lsls	r2, r2, #27
 8004a50:	4311      	orrs	r1, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6852      	ldr	r2, [r2, #4]
 8004a56:	3a01      	subs	r2, #1
 8004a58:	0112      	lsls	r2, r2, #4
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	492d      	ldr	r1, [pc, #180]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	614b      	str	r3, [r1, #20]
 8004a62:	e02d      	b.n	8004ac0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d115      	bne.n	8004a96 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a6c:	695a      	ldr	r2, [r3, #20]
 8004a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b1c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6892      	ldr	r2, [r2, #8]
 8004a76:	0211      	lsls	r1, r2, #8
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6912      	ldr	r2, [r2, #16]
 8004a7c:	0852      	lsrs	r2, r2, #1
 8004a7e:	3a01      	subs	r2, #1
 8004a80:	0552      	lsls	r2, r2, #21
 8004a82:	4311      	orrs	r1, r2
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6852      	ldr	r2, [r2, #4]
 8004a88:	3a01      	subs	r2, #1
 8004a8a:	0112      	lsls	r2, r2, #4
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	4921      	ldr	r1, [pc, #132]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	614b      	str	r3, [r1, #20]
 8004a94:	e014      	b.n	8004ac0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a96:	4b1f      	ldr	r3, [pc, #124]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	4b21      	ldr	r3, [pc, #132]	@ (8004b20 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6892      	ldr	r2, [r2, #8]
 8004aa2:	0211      	lsls	r1, r2, #8
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6952      	ldr	r2, [r2, #20]
 8004aa8:	0852      	lsrs	r2, r2, #1
 8004aaa:	3a01      	subs	r2, #1
 8004aac:	0652      	lsls	r2, r2, #25
 8004aae:	4311      	orrs	r1, r2
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6852      	ldr	r2, [r2, #4]
 8004ab4:	3a01      	subs	r2, #1
 8004ab6:	0112      	lsls	r2, r2, #4
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	4916      	ldr	r1, [pc, #88]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ac0:	4b14      	ldr	r3, [pc, #80]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a13      	ldr	r2, [pc, #76]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fc feb4 	bl	8001838 <HAL_GetTick>
 8004ad0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ad2:	e009      	b.n	8004ae8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ad4:	f7fc feb0 	bl	8001838 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d902      	bls.n	8004ae8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ae6:	e005      	b.n	8004af4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0ef      	beq.n	8004ad4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004afa:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	4904      	ldr	r1, [pc, #16]	@ (8004b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40021000 	.word	0x40021000
 8004b18:	07ff800f 	.word	0x07ff800f
 8004b1c:	ff9f800f 	.word	0xff9f800f
 8004b20:	f9ff800f 	.word	0xf9ff800f

08004b24 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b089      	sub	sp, #36	@ 0x24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b40:	d10b      	bne.n	8004b5a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004b42:	4b7e      	ldr	r3, [pc, #504]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b48:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004b4c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b60      	cmp	r3, #96	@ 0x60
 8004b52:	d112      	bne.n	8004b7a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004b54:	4b7a      	ldr	r3, [pc, #488]	@ (8004d40 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e00f      	b.n	8004b7a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b60:	d10b      	bne.n	8004b7a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004b62:	4b76      	ldr	r3, [pc, #472]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b6c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b74:	d101      	bne.n	8004b7a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004b76:	4b72      	ldr	r3, [pc, #456]	@ (8004d40 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004b78:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f040 80d6 	bne.w	8004d2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b40      	cmp	r3, #64	@ 0x40
 8004b8a:	d003      	beq.n	8004b94 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b92:	d13b      	bne.n	8004c0c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004b94:	4b69      	ldr	r3, [pc, #420]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ba0:	f040 80c4 	bne.w	8004d2c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004ba4:	4b65      	ldr	r3, [pc, #404]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 80bd 	beq.w	8004d2c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004bb2:	4b62      	ldr	r3, [pc, #392]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004bc6:	4b5d      	ldr	r3, [pc, #372]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004bd2:	4b5a      	ldr	r3, [pc, #360]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	0edb      	lsrs	r3, r3, #27
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004be4:	4b55      	ldr	r3, [pc, #340]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004bf0:	2311      	movs	r3, #17
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e001      	b.n	8004bfa <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004bf6:	2307      	movs	r3, #7
 8004bf8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	fb03 f202 	mul.w	r2, r3, r2
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004c0a:	e08f      	b.n	8004d2c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d13a      	bne.n	8004c88 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004c12:	4b4a      	ldr	r3, [pc, #296]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c1e:	f040 8086 	bne.w	8004d2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004c22:	4b46      	ldr	r3, [pc, #280]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d07f      	beq.n	8004d2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004c2e:	4b43      	ldr	r3, [pc, #268]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	3301      	adds	r3, #1
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004c42:	4b3e      	ldr	r3, [pc, #248]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c4c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004c4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	0edb      	lsrs	r3, r3, #27
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004c60:	4b36      	ldr	r3, [pc, #216]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004c6c:	2311      	movs	r3, #17
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	e001      	b.n	8004c76 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004c72:	2307      	movs	r3, #7
 8004c74:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	fb03 f202 	mul.w	r2, r3, r2
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	e052      	b.n	8004d2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b80      	cmp	r3, #128	@ 0x80
 8004c8c:	d003      	beq.n	8004c96 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c94:	d109      	bne.n	8004caa <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c96:	4b29      	ldr	r3, [pc, #164]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca2:	d144      	bne.n	8004d2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004ca4:	4b27      	ldr	r3, [pc, #156]	@ (8004d44 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004ca6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ca8:	e041      	b.n	8004d2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d003      	beq.n	8004cb8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cb6:	d13a      	bne.n	8004d2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004cb8:	4b20      	ldr	r3, [pc, #128]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cc4:	d133      	bne.n	8004d2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d02d      	beq.n	8004d2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	3301      	adds	r3, #1
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004ce6:	4b15      	ldr	r3, [pc, #84]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cf0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004cf2:	4b12      	ldr	r3, [pc, #72]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	0edb      	lsrs	r3, r3, #27
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004d04:	4b0d      	ldr	r3, [pc, #52]	@ (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004d10:	2311      	movs	r3, #17
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e001      	b.n	8004d1a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004d16:	2307      	movs	r3, #7
 8004d18:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	fb03 f202 	mul.w	r2, r3, r2
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	e000      	b.n	8004d2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004d2c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3724      	adds	r7, #36	@ 0x24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	001fff68 	.word	0x001fff68
 8004d44:	00f42400 	.word	0x00f42400

08004d48 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	@ 0x28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e1c7      	b.n	80050ea <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d10e      	bne.n	8004d82 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a81      	ldr	r2, [pc, #516]	@ (8004f70 <HAL_SAI_Init+0x228>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d107      	bne.n	8004d7e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d103      	bne.n	8004d7e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e1b3      	b.n	80050ea <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fc fbfe 	bl	8001598 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f9b1 	bl	8005104 <SAI_Disable>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e19e      	b.n	80050ea <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d00c      	beq.n	8004dd6 <HAL_SAI_Init+0x8e>
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d80d      	bhi.n	8004ddc <HAL_SAI_Init+0x94>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_SAI_Init+0x82>
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d003      	beq.n	8004dd0 <HAL_SAI_Init+0x88>
 8004dc8:	e008      	b.n	8004ddc <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004dce:	e008      	b.n	8004de2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004dd4:	e005      	b.n	8004de2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004dda:	e002      	b.n	8004de2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004de0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d81d      	bhi.n	8004e26 <HAL_SAI_Init+0xde>
 8004dea:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <HAL_SAI_Init+0xa8>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004e07 	.word	0x08004e07
 8004df8:	08004e0f 	.word	0x08004e0f
 8004dfc:	08004e17 	.word	0x08004e17
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
      break;
 8004e04:	e012      	b.n	8004e2c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e0a:	61fb      	str	r3, [r7, #28]
      break;
 8004e0c:	e00e      	b.n	8004e2c <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e12:	61fb      	str	r3, [r7, #28]
      break;
 8004e14:	e00a      	b.n	8004e2c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e1a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004e24:	e002      	b.n	8004e2c <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
      break;
 8004e2a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a4f      	ldr	r2, [pc, #316]	@ (8004f70 <HAL_SAI_Init+0x228>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_SAI_Init+0xf8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a4e      	ldr	r2, [pc, #312]	@ (8004f74 <HAL_SAI_Init+0x22c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d103      	bne.n	8004e48 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8004e40:	4a4d      	ldr	r2, [pc, #308]	@ (8004f78 <HAL_SAI_Init+0x230>)
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e002      	b.n	8004e4e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004e48:	4a4c      	ldr	r2, [pc, #304]	@ (8004f7c <HAL_SAI_Init+0x234>)
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d073      	beq.n	8004f3e <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a45      	ldr	r2, [pc, #276]	@ (8004f70 <HAL_SAI_Init+0x228>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_SAI_Init+0x122>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a43      	ldr	r2, [pc, #268]	@ (8004f74 <HAL_SAI_Init+0x22c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d105      	bne.n	8004e76 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004e6a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004e6e:	f7fe fd51 	bl	8003914 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e72:	61b8      	str	r0, [r7, #24]
 8004e74:	e004      	b.n	8004e80 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004e76:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004e7a:	f7fe fd4b 	bl	8003914 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e7e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e88:	d120      	bne.n	8004ecc <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d102      	bne.n	8004e98 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8004e92:	2340      	movs	r3, #64	@ 0x40
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	e00a      	b.n	8004eae <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d103      	bne.n	8004ea8 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8004ea0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	e002      	b.n	8004eae <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eac:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4619      	mov	r1, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	fb02 f303 	mul.w	r3, r2, r3
 8004ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e017      	b.n	8004efc <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ed4:	d101      	bne.n	8004eda <HAL_SAI_Init+0x192>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e000      	b.n	8004edc <HAL_SAI_Init+0x194>
 8004eda:	2301      	movs	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	4619      	mov	r1, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	fb02 f303 	mul.w	r3, r2, r3
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004efa:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4a20      	ldr	r2, [pc, #128]	@ (8004f80 <HAL_SAI_Init+0x238>)
 8004f00:	fba2 2303 	umull	r2, r3, r2, r3
 8004f04:	08da      	lsrs	r2, r3, #3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004f0a:	6979      	ldr	r1, [r7, #20]
 8004f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f80 <HAL_SAI_Init+0x238>)
 8004f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f12:	08da      	lsrs	r2, r3, #3
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	1aca      	subs	r2, r1, r3
 8004f1e:	2a08      	cmp	r2, #8
 8004f20:	d904      	bls.n	8004f2c <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d104      	bne.n	8004f3e <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	085a      	lsrs	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_SAI_Init+0x206>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d109      	bne.n	8004f62 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_SAI_Init+0x212>
 8004f56:	2300      	movs	r3, #0
 8004f58:	e001      	b.n	8004f5e <HAL_SAI_Init+0x216>
 8004f5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f5e:	623b      	str	r3, [r7, #32]
 8004f60:	e012      	b.n	8004f88 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10c      	bne.n	8004f84 <HAL_SAI_Init+0x23c>
 8004f6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f6e:	e00a      	b.n	8004f86 <HAL_SAI_Init+0x23e>
 8004f70:	40015404 	.word	0x40015404
 8004f74:	40015424 	.word	0x40015424
 8004f78:	40015400 	.word	0x40015400
 8004f7c:	40015800 	.word	0x40015800
 8004f80:	cccccccd 	.word	0xcccccccd
 8004f84:	2300      	movs	r3, #0
 8004f86:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6819      	ldr	r1, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b58      	ldr	r3, [pc, #352]	@ (80050f4 <HAL_SAI_Init+0x3ac>)
 8004f94:	400b      	ands	r3, r1
 8004f96:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6819      	ldr	r1, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004fac:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8004fc0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fcc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	051b      	lsls	r3, r3, #20
 8004fd4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004fda:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004ff2:	f023 030f 	bic.w	r3, r3, #15
 8004ff6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6899      	ldr	r1, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4b35      	ldr	r3, [pc, #212]	@ (80050f8 <HAL_SAI_Init+0x3b0>)
 8005022:	400b      	ands	r3, r1
 8005024:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6899      	ldr	r1, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005030:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005036:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 800503c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 8005042:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005048:	3b01      	subs	r3, #1
 800504a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800504c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68d9      	ldr	r1, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005064:	400b      	ands	r3, r1
 8005066:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68d9      	ldr	r1, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005076:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800507e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005084:	3b01      	subs	r3, #1
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <HAL_SAI_Init+0x3b4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d119      	bne.n	80050d0 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800509c:	4b18      	ldr	r3, [pc, #96]	@ (8005100 <HAL_SAI_Init+0x3b8>)
 800509e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a0:	4a17      	ldr	r2, [pc, #92]	@ (8005100 <HAL_SAI_Init+0x3b8>)
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d10e      	bne.n	80050d0 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ba:	3b01      	subs	r3, #1
 80050bc:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80050be:	4910      	ldr	r1, [pc, #64]	@ (8005100 <HAL_SAI_Init+0x3b8>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80050c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005100 <HAL_SAI_Init+0x3b8>)
 80050c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005100 <HAL_SAI_Init+0x3b8>)
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3728      	adds	r7, #40	@ 0x28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	f805c010 	.word	0xf805c010
 80050f8:	fff88000 	.word	0xfff88000
 80050fc:	40015404 	.word	0x40015404
 8005100:	40015400 	.word	0x40015400

08005104 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800510c:	4b18      	ldr	r3, [pc, #96]	@ (8005170 <SAI_Disable+0x6c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a18      	ldr	r2, [pc, #96]	@ (8005174 <SAI_Disable+0x70>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	0b1b      	lsrs	r3, r3, #12
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800512e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	72fb      	strb	r3, [r7, #11]
      break;
 800514a:	e009      	b.n	8005160 <SAI_Disable+0x5c>
    }
    count--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3b01      	subs	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e7      	bne.n	8005130 <SAI_Disable+0x2c>

  return status;
 8005160:	7afb      	ldrb	r3, [r7, #11]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	20000000 	.word	0x20000000
 8005174:	95cbec1b 	.word	0x95cbec1b

08005178 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	@ 0x28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e083      	b.n	8005292 <HAL_SD_Init+0x11a>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d105      	bne.n	80051a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fb ff3b 	bl	8001018 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2203      	movs	r2, #3
 80051a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f876 	bl	800529c <HAL_SD_InitCard>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e06b      	b.n	8005292 <HAL_SD_Init+0x11a>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80051ba:	f107 0308 	add.w	r3, r7, #8
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fab1 	bl	8005728 <HAL_SD_GetCardStatus>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e060      	b.n	8005292 <HAL_SD_Init+0x11a>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80051d0:	7e3b      	ldrb	r3, [r7, #24]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80051d6:	7e7b      	ldrb	r3, [r7, #25]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d10a      	bne.n	80051fa <HAL_SD_Init+0x82>
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d102      	bne.n	80051f0 <HAL_SD_Init+0x78>
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051f8:	e00b      	b.n	8005212 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d104      	bne.n	800520c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005208:	65da      	str	r2, [r3, #92]	@ 0x5c
 800520a:	e002      	b.n	8005212 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fb3b 	bl	8005894 <HAL_SD_ConfigWideBusOperation>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e034      	b.n	8005292 <HAL_SD_Init+0x11a>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005228:	f7fc fb06 	bl	8001838 <HAL_GetTick>
 800522c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800522e:	e014      	b.n	800525a <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005230:	f7fc fb02 	bl	8001838 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d10c      	bne.n	800525a <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005246:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e01b      	b.n	8005292 <HAL_SD_Init+0x11a>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fc2e 	bl	8005abc <HAL_SD_GetCardState>
 8005260:	4603      	mov	r3, r0
 8005262:	2b04      	cmp	r3, #4
 8005264:	d1e4      	bne.n	8005230 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	4619      	mov	r1, r3
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fb11 	bl	8005894 <HAL_SD_ConfigWideBusOperation>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_SD_Init+0x104>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e00a      	b.n	8005292 <HAL_SD_Init+0x11a>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3728      	adds	r7, #40	@ 0x28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800529c:	b5b0      	push	{r4, r5, r7, lr}
 800529e:	b08e      	sub	sp, #56	@ 0x38
 80052a0:	af04      	add	r7, sp, #16
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80052ac:	2300      	movs	r3, #0
 80052ae:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80052b4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80052b8:	f7fe fb2c 	bl	8003914 <HAL_RCCEx_GetPeriphCLKFreq>
 80052bc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80052d2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e079      	b.n	80053cc <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80052d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052da:	0a1b      	lsrs	r3, r3, #8
 80052dc:	4a3d      	ldr	r2, [pc, #244]	@ (80053d4 <HAL_SD_InitCard+0x138>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0210 	orr.w	r2, r2, #16
 8005302:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681d      	ldr	r5, [r3, #0]
 8005308:	466c      	mov	r4, sp
 800530a:	f107 0314 	add.w	r3, r7, #20
 800530e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800531c:	4628      	mov	r0, r5
 800531e:	f002 f89d 	bl	800745c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f002 f8cf 	bl	80074ca <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005332:	fbb2 f3f3 	udiv	r3, r2, r3
 8005336:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005338:	4a27      	ldr	r2, [pc, #156]	@ (80053d8 <HAL_SD_InitCard+0x13c>)
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	3301      	adds	r3, #1
 8005342:	4618      	mov	r0, r3
 8005344:	f7fc fa84 	bl	8001850 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fc97 	bl	8005c7c <SD_PowerON>
 800534e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00b      	beq.n	800536e <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e02e      	b.n	80053cc <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fbc4 	bl	8005afc <SD_InitCard>
 8005374:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e01b      	b.n	80053cc <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800539c:	4618      	mov	r0, r3
 800539e:	f002 f92b 	bl	80075f8 <SDMMC_CmdBlockLength>
 80053a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00f      	beq.n	80053ca <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a0b      	ldr	r2, [pc, #44]	@ (80053dc <HAL_SD_InitCard+0x140>)
 80053b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3728      	adds	r7, #40	@ 0x28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bdb0      	pop	{r4, r5, r7, pc}
 80053d4:	014f8b59 	.word	0x014f8b59
 80053d8:	00012110 	.word	0x00012110
 80053dc:	1fe00fff 	.word	0x1fe00fff

080053e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ee:	0f9b      	lsrs	r3, r3, #30
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fa:	0e9b      	lsrs	r3, r3, #26
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	b2da      	uxtb	r2, r3
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540c:	0e1b      	lsrs	r3, r3, #24
 800540e:	b2db      	uxtb	r3, r3
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	b2da      	uxtb	r2, r3
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	b2da      	uxtb	r2, r3
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	b2da      	uxtb	r2, r3
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005436:	b2da      	uxtb	r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005440:	0d1b      	lsrs	r3, r3, #20
 8005442:	b29a      	uxth	r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	b2db      	uxtb	r3, r3
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	b2da      	uxtb	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800545e:	0bdb      	lsrs	r3, r3, #15
 8005460:	b2db      	uxtb	r3, r3
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	b2da      	uxtb	r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005470:	0b9b      	lsrs	r3, r3, #14
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	b2da      	uxtb	r2, r3
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005482:	0b5b      	lsrs	r3, r3, #13
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	b2da      	uxtb	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005494:	0b1b      	lsrs	r3, r3, #12
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	b2da      	uxtb	r2, r3
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2200      	movs	r2, #0
 80054a6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d163      	bne.n	8005578 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054b4:	009a      	lsls	r2, r3, #2
 80054b6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80054ba:	4013      	ands	r3, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80054c0:	0f92      	lsrs	r2, r2, #30
 80054c2:	431a      	orrs	r2, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054cc:	0edb      	lsrs	r3, r3, #27
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054de:	0e1b      	lsrs	r3, r3, #24
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054f0:	0d5b      	lsrs	r3, r3, #21
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005502:	0c9b      	lsrs	r3, r3, #18
 8005504:	b2db      	uxtb	r3, r3
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	b2da      	uxtb	r2, r3
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005514:	0bdb      	lsrs	r3, r3, #15
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	b2da      	uxtb	r2, r3
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	7e1b      	ldrb	r3, [r3, #24]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	3302      	adds	r3, #2
 8005538:	2201      	movs	r2, #1
 800553a:	fa02 f303 	lsl.w	r3, r2, r3
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005542:	fb03 f202 	mul.w	r2, r3, r2
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	7a1b      	ldrb	r3, [r3, #8]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	2201      	movs	r2, #1
 8005556:	409a      	lsls	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	651a      	str	r2, [r3, #80]	@ 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005564:	0a52      	lsrs	r2, r2, #9
 8005566:	fb03 f202 	mul.w	r2, r3, r2
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005574:	659a      	str	r2, [r3, #88]	@ 0x58
 8005576:	e031      	b.n	80055dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d11d      	bne.n	80055bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800558e:	0c1b      	lsrs	r3, r3, #16
 8005590:	431a      	orrs	r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	3301      	adds	r3, #1
 800559c:	029a      	lsls	r2, r3, #10
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = 512U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055b0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80055ba:	e00f      	b.n	80055dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a58      	ldr	r2, [pc, #352]	@ (8005724 <HAL_SD_GetCardCSD+0x344>)
 80055c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e09d      	b.n	8005718 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055e0:	0b9b      	lsrs	r3, r3, #14
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055f2:	09db      	lsrs	r3, r3, #7
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800560a:	b2da      	uxtb	r2, r3
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005614:	0fdb      	lsrs	r3, r3, #31
 8005616:	b2da      	uxtb	r2, r3
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005620:	0f5b      	lsrs	r3, r3, #29
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	b2da      	uxtb	r2, r3
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005632:	0e9b      	lsrs	r3, r3, #26
 8005634:	b2db      	uxtb	r3, r3
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	b2da      	uxtb	r2, r3
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005644:	0d9b      	lsrs	r3, r3, #22
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	b2da      	uxtb	r2, r3
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005656:	0d5b      	lsrs	r3, r3, #21
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	b2da      	uxtb	r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005672:	0c1b      	lsrs	r3, r3, #16
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	b2da      	uxtb	r2, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005686:	0bdb      	lsrs	r3, r3, #15
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	b2da      	uxtb	r2, r3
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800569a:	0b9b      	lsrs	r3, r3, #14
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ae:	0b5b      	lsrs	r3, r3, #13
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056c2:	0b1b      	lsrs	r3, r3, #12
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056d6:	0a9b      	lsrs	r3, r3, #10
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ea:	0a1b      	lsrs	r3, r3, #8
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005706:	b2da      	uxtb	r2, r3
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	1fe00fff 	.word	0x1fe00fff

08005728 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b094      	sub	sp, #80	@ 0x50
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005738:	f107 0308 	add.w	r3, r7, #8
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fba8 	bl	8005e94 <SD_SendSDStatus>
 8005744:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005748:	2b00      	cmp	r3, #0
 800574a:	d011      	beq.n	8005770 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a4f      	ldr	r2, [pc, #316]	@ (8005890 <HAL_SD_GetCardStatus+0x168>)
 8005752:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800576e:	e070      	b.n	8005852 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	099b      	lsrs	r3, r3, #6
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	b2da      	uxtb	r2, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	095b      	lsrs	r3, r3, #5
 8005784:	b2db      	uxtb	r3, r3
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	b2da      	uxtb	r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	0a1b      	lsrs	r3, r3, #8
 8005794:	b29b      	uxth	r3, r3
 8005796:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800579a:	b29a      	uxth	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	0e1b      	lsrs	r3, r3, #24
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	4313      	orrs	r3, r2
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	061a      	lsls	r2, r3, #24
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80057b6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	0a1b      	lsrs	r3, r3, #8
 80057bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80057c0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	0e1b      	lsrs	r3, r3, #24
 80057c6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	0a1b      	lsrs	r3, r3, #8
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	0d1b      	lsrs	r3, r3, #20
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	0c1b      	lsrs	r3, r3, #16
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	b29b      	uxth	r3, r3
 8005802:	4313      	orrs	r3, r2
 8005804:	b29a      	uxth	r2, r3
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	0a9b      	lsrs	r3, r3, #10
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005814:	b2da      	uxtb	r2, r3
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	0a1b      	lsrs	r3, r3, #8
 800581e:	b2db      	uxtb	r3, r3
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	b2da      	uxtb	r2, r3
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	b2db      	uxtb	r3, r3
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	b2da      	uxtb	r2, r3
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	b2da      	uxtb	r2, r3
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	0e1b      	lsrs	r3, r3, #24
 800584c:	b2da      	uxtb	r2, r3
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800585a:	4618      	mov	r0, r3
 800585c:	f001 fecc 	bl	80075f8 <SDMMC_CmdBlockLength>
 8005860:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00d      	beq.n	8005884 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a08      	ldr	r2, [pc, #32]	@ (8005890 <HAL_SD_GetCardStatus+0x168>)
 800586e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005874:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8005884:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005888:	4618      	mov	r0, r3
 800588a:	3750      	adds	r7, #80	@ 0x50
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	1fe00fff 	.word	0x1fe00fff

08005894 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005894:	b5b0      	push	{r4, r5, r7, lr}
 8005896:	b090      	sub	sp, #64	@ 0x40
 8005898:	af04      	add	r7, sp, #16
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2203      	movs	r2, #3
 80058a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d02e      	beq.n	8005912 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ba:	d106      	bne.n	80058ca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80058c8:	e029      	b.n	800591e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058d0:	d10a      	bne.n	80058e8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fbd6 	bl	8006084 <SD_WideBus_Enable>
 80058d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80058e6:	e01a      	b.n	800591e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fc13 	bl	800611a <SD_WideBus_Disable>
 80058f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	639a      	str	r2, [r3, #56]	@ 0x38
 8005902:	e00c      	b.n	800591e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005908:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005910:	e005      	b.n	800591e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005916:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a60      	ldr	r2, [pc, #384]	@ (8005aac <HAL_SD_ConfigWideBusOperation+0x218>)
 800592c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005934:	e097      	b.n	8005a66 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005936:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800593a:	f7fd ffeb 	bl	8003914 <HAL_RCCEx_GetPeriphCLKFreq>
 800593e:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 8086 	beq.w	8005a54 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695a      	ldr	r2, [r3, #20]
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	4952      	ldr	r1, [pc, #328]	@ (8005ab0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005966:	fba1 1303 	umull	r1, r3, r1, r3
 800596a:	0e1b      	lsrs	r3, r3, #24
 800596c:	429a      	cmp	r2, r3
 800596e:	d303      	bcc.n	8005978 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	61fb      	str	r3, [r7, #28]
 8005976:	e05a      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005980:	d103      	bne.n	800598a <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	e051      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005992:	d126      	bne.n	80059e2 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10e      	bne.n	80059ba <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	4a45      	ldr	r2, [pc, #276]	@ (8005ab4 <HAL_SD_ConfigWideBusOperation+0x220>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d906      	bls.n	80059b2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	4a42      	ldr	r2, [pc, #264]	@ (8005ab0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80059a8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ac:	0e5b      	lsrs	r3, r3, #25
 80059ae:	61fb      	str	r3, [r7, #28]
 80059b0:	e03d      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	61fb      	str	r3, [r7, #28]
 80059b8:	e039      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c6:	4a3b      	ldr	r2, [pc, #236]	@ (8005ab4 <HAL_SD_ConfigWideBusOperation+0x220>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d906      	bls.n	80059da <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	4a38      	ldr	r2, [pc, #224]	@ (8005ab0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	0e5b      	lsrs	r3, r3, #25
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	e029      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	e025      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10e      	bne.n	8005a08 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	4a32      	ldr	r2, [pc, #200]	@ (8005ab8 <HAL_SD_ConfigWideBusOperation+0x224>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d906      	bls.n	8005a00 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	4a2e      	ldr	r2, [pc, #184]	@ (8005ab0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80059f6:	fba2 2303 	umull	r2, r3, r2, r3
 80059fa:	0e1b      	lsrs	r3, r3, #24
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	e016      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	61fb      	str	r3, [r7, #28]
 8005a06:	e012      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	4a28      	ldr	r2, [pc, #160]	@ (8005ab8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d906      	bls.n	8005a28 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	4a24      	ldr	r2, [pc, #144]	@ (8005ab0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a22:	0e1b      	lsrs	r3, r3, #24
 8005a24:	61fb      	str	r3, [r7, #28]
 8005a26:	e002      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681d      	ldr	r5, [r3, #0]
 8005a38:	466c      	mov	r4, sp
 8005a3a:	f107 0318 	add.w	r3, r7, #24
 8005a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a46:	f107 030c 	add.w	r3, r7, #12
 8005a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f001 fd05 	bl	800745c <SDMMC_Init>
 8005a52:	e008      	b.n	8005a66 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a58:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 fdc2 	bl	80075f8 <SDMMC_CmdBlockLength>
 8005a74:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00c      	beq.n	8005a96 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a0a      	ldr	r2, [pc, #40]	@ (8005aac <HAL_SD_ConfigWideBusOperation+0x218>)
 8005a82:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3730      	adds	r7, #48	@ 0x30
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	1fe00fff 	.word	0x1fe00fff
 8005ab0:	55e63b89 	.word	0x55e63b89
 8005ab4:	02faf080 	.word	0x02faf080
 8005ab8:	017d7840 	.word	0x017d7840

08005abc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005ac8:	f107 030c 	add.w	r3, r7, #12
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fab0 	bl	8006034 <SD_SendStatus>
 8005ad4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	0a5b      	lsrs	r3, r3, #9
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005af2:	693b      	ldr	r3, [r7, #16]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005afc:	b5b0      	push	{r4, r5, r7, lr}
 8005afe:	b090      	sub	sp, #64	@ 0x40
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005b04:	2301      	movs	r3, #1
 8005b06:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 fcee 	bl	80074ee <SDMMC_GetPowerState>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d102      	bne.n	8005b1e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b18:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005b1c:	e0a9      	b.n	8005c72 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d02e      	beq.n	8005b84 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f001 fe71 	bl	8007812 <SDMMC_CmdSendCID>
 8005b30:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <SD_InitCard+0x40>
    {
      return errorstate;
 8005b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3a:	e09a      	b.n	8005c72 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 fd19 	bl	800757a <SDMMC_GetResponse>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2104      	movs	r1, #4
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 fd10 	bl	800757a <SDMMC_GetResponse>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2108      	movs	r1, #8
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 fd07 	bl	800757a <SDMMC_GetResponse>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	210c      	movs	r1, #12
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f001 fcfe 	bl	800757a <SDMMC_GetResponse>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	67da      	str	r2, [r3, #124]	@ 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d00d      	beq.n	8005ba8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f107 020e 	add.w	r2, r7, #14
 8005b94:	4611      	mov	r1, r2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 fe7a 	bl	8007890 <SDMMC_CmdSetRelAdd>
 8005b9c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <SD_InitCard+0xac>
    {
      return errorstate;
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba6:	e064      	b.n	8005c72 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d036      	beq.n	8005c1e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005bb0:	89fb      	ldrh	r3, [r7, #14]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc0:	041b      	lsls	r3, r3, #16
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f001 fe43 	bl	8007850 <SDMMC_CmdSendCSD>
 8005bca:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <SD_InitCard+0xda>
    {
      return errorstate;
 8005bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd4:	e04d      	b.n	8005c72 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 fccc 	bl	800757a <SDMMC_GetResponse>
 8005be2:	4602      	mov	r2, r0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2104      	movs	r1, #4
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 fcc3 	bl	800757a <SDMMC_GetResponse>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2108      	movs	r1, #8
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 fcba 	bl	800757a <SDMMC_GetResponse>
 8005c06:	4602      	mov	r2, r0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	210c      	movs	r1, #12
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fcb1 	bl	800757a <SDMMC_GetResponse>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2104      	movs	r1, #4
 8005c24:	4618      	mov	r0, r3
 8005c26:	f001 fca8 	bl	800757a <SDMMC_GetResponse>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	0d1a      	lsrs	r2, r3, #20
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005c32:	f107 0310 	add.w	r3, r7, #16
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff fbd1 	bl	80053e0 <HAL_SD_GetCardCSD>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005c48:	e013      	b.n	8005c72 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c52:	041b      	lsls	r3, r3, #16
 8005c54:	2200      	movs	r2, #0
 8005c56:	461c      	mov	r4, r3
 8005c58:	4615      	mov	r5, r2
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	4608      	mov	r0, r1
 8005c60:	f001 fced 	bl	800763e <SDMMC_CmdSelDesel>
 8005c64:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <SD_InitCard+0x174>
  {
    return errorstate;
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6e:	e000      	b.n	8005c72 <SD_InitCard+0x176>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3740      	adds	r7, #64	@ 0x40
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005c7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8005c90:	f7fb fdd2 	bl	8001838 <HAL_GetTick>
 8005c94:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 fcf3 	bl	8007686 <SDMMC_CmdGoIdleState>
 8005ca0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <SD_PowerON+0x30>
  {
    return errorstate;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	e0ed      	b.n	8005e88 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 fd06 	bl	80076c2 <SDMMC_CmdOperCond>
 8005cb6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00d      	beq.n	8005cda <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 fcdc 	bl	8007686 <SDMMC_CmdGoIdleState>
 8005cce:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d004      	beq.n	8005ce0 <SD_PowerON+0x64>
    {
      return errorstate;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	e0d6      	b.n	8005e88 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d137      	bne.n	8005d58 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2100      	movs	r1, #0
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 fd07 	bl	8007702 <SDMMC_CmdAppCommand>
 8005cf4:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d02d      	beq.n	8005d58 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cfc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005d00:	e0c2      	b.n	8005e88 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2100      	movs	r1, #0
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fcfa 	bl	8007702 <SDMMC_CmdAppCommand>
 8005d0e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <SD_PowerON+0x9e>
    {
      return errorstate;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	e0b6      	b.n	8005e88 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	495c      	ldr	r1, [pc, #368]	@ (8005e90 <SD_PowerON+0x214>)
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 fd11 	bl	8007748 <SDMMC_CmdAppOperCommand>
 8005d26:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d2e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005d32:	e0a9      	b.n	8005e88 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 fc1d 	bl	800757a <SDMMC_GetResponse>
 8005d40:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	0fdb      	lsrs	r3, r3, #31
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <SD_PowerON+0xd2>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e000      	b.n	8005d50 <SD_PowerON+0xd4>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61bb      	str	r3, [r7, #24]

    count++;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3301      	adds	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d802      	bhi.n	8005d68 <SD_PowerON+0xec>
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0cc      	beq.n	8005d02 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d902      	bls.n	8005d78 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005d72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d76:	e087      	b.n	8005e88 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d07e      	beq.n	8005e80 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	63da      	str	r2, [r3, #60]	@ 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d17a      	bne.n	8005e86 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d075      	beq.n	8005e86 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005da0:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0208 	orr.w	r2, r2, #8
 8005db0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 fdd1 	bl	800795e <SDMMC_CmdVoltageSwitch>
 8005dbc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <SD_PowerON+0x162>
        {
          return errorstate;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	e05f      	b.n	8005e88 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005dc8:	f7fb fd36 	bl	8001838 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d102      	bne.n	8005dde <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8005dd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ddc:	e054      	b.n	8005e88 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005de8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dec:	d1ec      	bne.n	8005dc8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005df6:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e06:	d002      	beq.n	8005e0e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8005e08:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005e0c:	e03c      	b.n	8005e88 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8005e0e:	2001      	movs	r0, #1
 8005e10:	f000 fa9e 	bl	8006350 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0204 	orr.w	r2, r2, #4
 8005e22:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005e24:	e00a      	b.n	8005e3c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005e26:	f7fb fd07 	bl	8001838 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e34:	d102      	bne.n	8005e3c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8005e36:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e3a:	e025      	b.n	8005e88 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e4a:	d1ec      	bne.n	8005e26 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e54:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e64:	d102      	bne.n	8005e6c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005e66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e6a:	e00d      	b.n	8005e88 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2213      	movs	r2, #19
 8005e72:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e7e:	e002      	b.n	8005e86 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	63da      	str	r2, [r3, #60]	@ 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3720      	adds	r7, #32
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	c1100000 	.word	0xc1100000

08005e94 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08c      	sub	sp, #48	@ 0x30
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005e9e:	f7fb fccb 	bl	8001838 <HAL_GetTick>
 8005ea2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 fb63 	bl	800757a <SDMMC_GetResponse>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ebe:	d102      	bne.n	8005ec6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005ec0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ec4:	e0b0      	b.n	8006028 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2140      	movs	r1, #64	@ 0x40
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 fb93 	bl	80075f8 <SDMMC_CmdBlockLength>
 8005ed2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	e0a0      	b.n	8006028 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eee:	041b      	lsls	r3, r3, #16
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f001 fc05 	bl	8007702 <SDMMC_CmdAppCommand>
 8005ef8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	e08d      	b.n	8006028 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f10:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8005f12:	2340      	movs	r3, #64	@ 0x40
 8005f14:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005f16:	2360      	movs	r3, #96	@ 0x60
 8005f18:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005f22:	2301      	movs	r3, #1
 8005f24:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f107 0208 	add.w	r2, r7, #8
 8005f2e:	4611      	mov	r1, r2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 fb35 	bl	80075a0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fced 	bl	800791a <SDMMC_CmdStatusRegister>
 8005f40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d02b      	beq.n	8005fa0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	e069      	b.n	8006028 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d013      	beq.n	8005f8a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8005f62:	2300      	movs	r3, #0
 8005f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f66:	e00d      	b.n	8005f84 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 fa9f 	bl	80074b0 <SDMMC_ReadFIFO>
 8005f72:	4602      	mov	r2, r0
 8005f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f76:	601a      	str	r2, [r3, #0]
        pData++;
 8005f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for(count = 0U; count < 8U; count++)
 8005f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f80:	3301      	adds	r3, #1
 8005f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f86:	2b07      	cmp	r3, #7
 8005f88:	d9ee      	bls.n	8005f68 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005f8a:	f7fb fc55 	bl	8001838 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d102      	bne.n	8005fa0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005f9a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005f9e:	e043      	b.n	8006028 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0d2      	beq.n	8005f54 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	e033      	b.n	8006028 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e02a      	b.n	8006028 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d017      	beq.n	8006010 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005fe0:	2320      	movs	r3, #32
 8005fe2:	e021      	b.n	8006028 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 fa61 	bl	80074b0 <SDMMC_ReadFIFO>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff2:	601a      	str	r2, [r3, #0]
    pData++;
 8005ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ffa:	f7fb fc1d 	bl	8001838 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d102      	bne.n	8006010 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800600a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800600e:	e00b      	b.n	8006028 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006016:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e2      	bne.n	8005fe4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a03      	ldr	r2, [pc, #12]	@ (8006030 <SD_SendSDStatus+0x19c>)
 8006024:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3730      	adds	r7, #48	@ 0x30
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	18000f3a 	.word	0x18000f3a

08006034 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d102      	bne.n	800604a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006044:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006048:	e018      	b.n	800607c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006052:	041b      	lsls	r3, r3, #16
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f001 fc3c 	bl	80078d4 <SDMMC_CmdSendStatus>
 800605c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	e009      	b.n	800607c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f001 fa83 	bl	800757a <SDMMC_GetResponse>
 8006074:	4602      	mov	r2, r0
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2100      	movs	r1, #0
 800609a:	4618      	mov	r0, r3
 800609c:	f001 fa6d 	bl	800757a <SDMMC_GetResponse>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060aa:	d102      	bne.n	80060b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80060ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80060b0:	e02f      	b.n	8006112 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80060b2:	f107 030c 	add.w	r3, r7, #12
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f879 	bl	80061b0 <SD_FindSCR>
 80060be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	e023      	b.n	8006112 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01c      	beq.n	800610e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060dc:	041b      	lsls	r3, r3, #16
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f001 fb0e 	bl	8007702 <SDMMC_CmdAppCommand>
 80060e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	e00f      	b.n	8006112 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2102      	movs	r1, #2
 80060f8:	4618      	mov	r0, r3
 80060fa:	f001 fb45 	bl	8007788 <SDMMC_CmdBusWidth>
 80060fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	e003      	b.n	8006112 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800610a:	2300      	movs	r3, #0
 800610c:	e001      	b.n	8006112 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800610e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b086      	sub	sp, #24
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	2300      	movs	r3, #0
 8006128:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2100      	movs	r1, #0
 8006130:	4618      	mov	r0, r3
 8006132:	f001 fa22 	bl	800757a <SDMMC_GetResponse>
 8006136:	4603      	mov	r3, r0
 8006138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800613c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006140:	d102      	bne.n	8006148 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006142:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006146:	e02f      	b.n	80061a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006148:	f107 030c 	add.w	r3, r7, #12
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f82e 	bl	80061b0 <SD_FindSCR>
 8006154:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	e023      	b.n	80061a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d01c      	beq.n	80061a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006172:	041b      	lsls	r3, r3, #16
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f001 fac3 	bl	8007702 <SDMMC_CmdAppCommand>
 800617c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	e00f      	b.n	80061a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2100      	movs	r1, #0
 800618e:	4618      	mov	r0, r3
 8006190:	f001 fafa 	bl	8007788 <SDMMC_CmdBusWidth>
 8006194:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	e003      	b.n	80061a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e001      	b.n	80061a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80061a4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08e      	sub	sp, #56	@ 0x38
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80061ba:	f7fb fb3d 	bl	8001838 <HAL_GetTick>
 80061be:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80061c4:	2300      	movs	r3, #0
 80061c6:	60bb      	str	r3, [r7, #8]
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2108      	movs	r1, #8
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 fa0e 	bl	80075f8 <SDMMC_CmdBlockLength>
 80061dc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80061e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e6:	e0ad      	b.n	8006344 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061f0:	041b      	lsls	r3, r3, #16
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f001 fa84 	bl	8007702 <SDMMC_CmdAppCommand>
 80061fa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80061fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006204:	e09e      	b.n	8006344 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006206:	f04f 33ff 	mov.w	r3, #4294967295
 800620a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800620c:	2308      	movs	r3, #8
 800620e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006210:	2330      	movs	r3, #48	@ 0x30
 8006212:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006214:	2302      	movs	r3, #2
 8006216:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006218:	2300      	movs	r3, #0
 800621a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800621c:	2301      	movs	r3, #1
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f107 0210 	add.w	r2, r7, #16
 8006228:	4611      	mov	r1, r2
 800622a:	4618      	mov	r0, r3
 800622c:	f001 f9b8 	bl	80075a0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4618      	mov	r0, r3
 8006236:	f001 faca 	bl	80077ce <SDMMC_CmdSendSCR>
 800623a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800623c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623e:	2b00      	cmp	r3, #0
 8006240:	d027      	beq.n	8006292 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006244:	e07e      	b.n	8006344 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800624c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d113      	bne.n	800627c <SD_FindSCR+0xcc>
 8006254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006256:	2b00      	cmp	r3, #0
 8006258:	d110      	bne.n	800627c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f001 f926 	bl	80074b0 <SDMMC_ReadFIFO>
 8006264:	4603      	mov	r3, r0
 8006266:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f001 f91f 	bl	80074b0 <SDMMC_ReadFIFO>
 8006272:	4603      	mov	r3, r0
 8006274:	60fb      	str	r3, [r7, #12]
      index++;
 8006276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006278:	3301      	adds	r3, #1
 800627a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800627c:	f7fb fadc 	bl	8001838 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d102      	bne.n	8006292 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800628c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006290:	e058      	b.n	8006344 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006298:	f240 532a 	movw	r3, #1322	@ 0x52a
 800629c:	4013      	ands	r3, r2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0d1      	beq.n	8006246 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a8:	f003 0308 	and.w	r3, r3, #8
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2208      	movs	r2, #8
 80062b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80062b8:	2308      	movs	r3, #8
 80062ba:	e043      	b.n	8006344 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2202      	movs	r2, #2
 80062d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80062d2:	2302      	movs	r3, #2
 80062d4:	e036      	b.n	8006344 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2220      	movs	r2, #32
 80062ea:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80062ec:	2320      	movs	r3, #32
 80062ee:	e029      	b.n	8006344 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a15      	ldr	r2, [pc, #84]	@ (800634c <SD_FindSCR+0x19c>)
 80062f6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	061a      	lsls	r2, r3, #24
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006304:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	0a1b      	lsrs	r3, r3, #8
 800630a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800630e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	0e1b      	lsrs	r3, r3, #24
 8006314:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006318:	601a      	str	r2, [r3, #0]
    scr++;
 800631a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631c:	3304      	adds	r3, #4
 800631e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	061a      	lsls	r2, r3, #24
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800632c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	0a1b      	lsrs	r3, r3, #8
 8006332:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006336:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	0e1b      	lsrs	r3, r3, #24
 800633c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800633e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006340:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3738      	adds	r7, #56	@ 0x38
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	18000f3a 	.word	0x18000f3a

08006350 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e095      	b.n	80064a4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	d108      	bne.n	8006392 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006388:	d009      	beq.n	800639e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	61da      	str	r2, [r3, #28]
 8006390:	e005      	b.n	800639e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d106      	bne.n	80063be <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7fa feb1 	bl	8001120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2202      	movs	r2, #2
 80063c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063d4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80063de:	d902      	bls.n	80063e6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e002      	b.n	80063ec <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80063e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80063ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80063f4:	d007      	beq.n	8006406 <HAL_SPI_Init+0xa0>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80063fe:	d002      	beq.n	8006406 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006448:	ea42 0103 	orr.w	r1, r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006450:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	f003 0204 	and.w	r2, r3, #4
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	f003 0310 	and.w	r3, r3, #16
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006482:	ea42 0103 	orr.w	r1, r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e038      	b.n	8006534 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7fb f854 	bl	8001584 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3308      	adds	r3, #8
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f000 fe96 	bl	8007218 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6818      	ldr	r0, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	461a      	mov	r2, r3
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	f000 ff28 	bl	800734c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6858      	ldr	r0, [r3, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	f000 ff6c 	bl	80073e6 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	6892      	ldr	r2, [r2, #8]
 8006516:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	6892      	ldr	r2, [r2, #8]
 8006522:	f041 0101 	orr.w	r1, r1, #1
 8006526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e042      	b.n	80065d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006554:	2b00      	cmp	r3, #0
 8006556:	d106      	bne.n	8006566 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7fa fe3f 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2224      	movs	r2, #36	@ 0x24
 800656a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fb24 	bl	8006bd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f825 	bl	80065dc <UART_SetConfig>
 8006592:	4603      	mov	r3, r0
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e01b      	b.n	80065d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fba3 	bl	8006d18 <UART_CheckIdleState>
 80065d2:	4603      	mov	r3, r0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065e0:	b08c      	sub	sp, #48	@ 0x30
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	4313      	orrs	r3, r2
 8006602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4baa      	ldr	r3, [pc, #680]	@ (80068b4 <UART_SetConfig+0x2d8>)
 800660c:	4013      	ands	r3, r2
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006614:	430b      	orrs	r3, r1
 8006616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a9f      	ldr	r2, [pc, #636]	@ (80068b8 <UART_SetConfig+0x2dc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006644:	4313      	orrs	r3, r2
 8006646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006652:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	6812      	ldr	r2, [r2, #0]
 800665a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800665c:	430b      	orrs	r3, r1
 800665e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006666:	f023 010f 	bic.w	r1, r3, #15
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a90      	ldr	r2, [pc, #576]	@ (80068bc <UART_SetConfig+0x2e0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d125      	bne.n	80066cc <UART_SetConfig+0xf0>
 8006680:	4b8f      	ldr	r3, [pc, #572]	@ (80068c0 <UART_SetConfig+0x2e4>)
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b03      	cmp	r3, #3
 800668c:	d81a      	bhi.n	80066c4 <UART_SetConfig+0xe8>
 800668e:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <UART_SetConfig+0xb8>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066a5 	.word	0x080066a5
 8006698:	080066b5 	.word	0x080066b5
 800669c:	080066ad 	.word	0x080066ad
 80066a0:	080066bd 	.word	0x080066bd
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066aa:	e116      	b.n	80068da <UART_SetConfig+0x2fe>
 80066ac:	2302      	movs	r3, #2
 80066ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b2:	e112      	b.n	80068da <UART_SetConfig+0x2fe>
 80066b4:	2304      	movs	r3, #4
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ba:	e10e      	b.n	80068da <UART_SetConfig+0x2fe>
 80066bc:	2308      	movs	r3, #8
 80066be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c2:	e10a      	b.n	80068da <UART_SetConfig+0x2fe>
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ca:	e106      	b.n	80068da <UART_SetConfig+0x2fe>
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a7c      	ldr	r2, [pc, #496]	@ (80068c4 <UART_SetConfig+0x2e8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d138      	bne.n	8006748 <UART_SetConfig+0x16c>
 80066d6:	4b7a      	ldr	r3, [pc, #488]	@ (80068c0 <UART_SetConfig+0x2e4>)
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066dc:	f003 030c 	and.w	r3, r3, #12
 80066e0:	2b0c      	cmp	r3, #12
 80066e2:	d82d      	bhi.n	8006740 <UART_SetConfig+0x164>
 80066e4:	a201      	add	r2, pc, #4	@ (adr r2, 80066ec <UART_SetConfig+0x110>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006721 	.word	0x08006721
 80066f0:	08006741 	.word	0x08006741
 80066f4:	08006741 	.word	0x08006741
 80066f8:	08006741 	.word	0x08006741
 80066fc:	08006731 	.word	0x08006731
 8006700:	08006741 	.word	0x08006741
 8006704:	08006741 	.word	0x08006741
 8006708:	08006741 	.word	0x08006741
 800670c:	08006729 	.word	0x08006729
 8006710:	08006741 	.word	0x08006741
 8006714:	08006741 	.word	0x08006741
 8006718:	08006741 	.word	0x08006741
 800671c:	08006739 	.word	0x08006739
 8006720:	2300      	movs	r3, #0
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006726:	e0d8      	b.n	80068da <UART_SetConfig+0x2fe>
 8006728:	2302      	movs	r3, #2
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800672e:	e0d4      	b.n	80068da <UART_SetConfig+0x2fe>
 8006730:	2304      	movs	r3, #4
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006736:	e0d0      	b.n	80068da <UART_SetConfig+0x2fe>
 8006738:	2308      	movs	r3, #8
 800673a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800673e:	e0cc      	b.n	80068da <UART_SetConfig+0x2fe>
 8006740:	2310      	movs	r3, #16
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006746:	e0c8      	b.n	80068da <UART_SetConfig+0x2fe>
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a5e      	ldr	r2, [pc, #376]	@ (80068c8 <UART_SetConfig+0x2ec>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d125      	bne.n	800679e <UART_SetConfig+0x1c2>
 8006752:	4b5b      	ldr	r3, [pc, #364]	@ (80068c0 <UART_SetConfig+0x2e4>)
 8006754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006758:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800675c:	2b30      	cmp	r3, #48	@ 0x30
 800675e:	d016      	beq.n	800678e <UART_SetConfig+0x1b2>
 8006760:	2b30      	cmp	r3, #48	@ 0x30
 8006762:	d818      	bhi.n	8006796 <UART_SetConfig+0x1ba>
 8006764:	2b20      	cmp	r3, #32
 8006766:	d00a      	beq.n	800677e <UART_SetConfig+0x1a2>
 8006768:	2b20      	cmp	r3, #32
 800676a:	d814      	bhi.n	8006796 <UART_SetConfig+0x1ba>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <UART_SetConfig+0x19a>
 8006770:	2b10      	cmp	r3, #16
 8006772:	d008      	beq.n	8006786 <UART_SetConfig+0x1aa>
 8006774:	e00f      	b.n	8006796 <UART_SetConfig+0x1ba>
 8006776:	2300      	movs	r3, #0
 8006778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677c:	e0ad      	b.n	80068da <UART_SetConfig+0x2fe>
 800677e:	2302      	movs	r3, #2
 8006780:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006784:	e0a9      	b.n	80068da <UART_SetConfig+0x2fe>
 8006786:	2304      	movs	r3, #4
 8006788:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800678c:	e0a5      	b.n	80068da <UART_SetConfig+0x2fe>
 800678e:	2308      	movs	r3, #8
 8006790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006794:	e0a1      	b.n	80068da <UART_SetConfig+0x2fe>
 8006796:	2310      	movs	r3, #16
 8006798:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800679c:	e09d      	b.n	80068da <UART_SetConfig+0x2fe>
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a4a      	ldr	r2, [pc, #296]	@ (80068cc <UART_SetConfig+0x2f0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d125      	bne.n	80067f4 <UART_SetConfig+0x218>
 80067a8:	4b45      	ldr	r3, [pc, #276]	@ (80068c0 <UART_SetConfig+0x2e4>)
 80067aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80067b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80067b4:	d016      	beq.n	80067e4 <UART_SetConfig+0x208>
 80067b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80067b8:	d818      	bhi.n	80067ec <UART_SetConfig+0x210>
 80067ba:	2b80      	cmp	r3, #128	@ 0x80
 80067bc:	d00a      	beq.n	80067d4 <UART_SetConfig+0x1f8>
 80067be:	2b80      	cmp	r3, #128	@ 0x80
 80067c0:	d814      	bhi.n	80067ec <UART_SetConfig+0x210>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <UART_SetConfig+0x1f0>
 80067c6:	2b40      	cmp	r3, #64	@ 0x40
 80067c8:	d008      	beq.n	80067dc <UART_SetConfig+0x200>
 80067ca:	e00f      	b.n	80067ec <UART_SetConfig+0x210>
 80067cc:	2300      	movs	r3, #0
 80067ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d2:	e082      	b.n	80068da <UART_SetConfig+0x2fe>
 80067d4:	2302      	movs	r3, #2
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067da:	e07e      	b.n	80068da <UART_SetConfig+0x2fe>
 80067dc:	2304      	movs	r3, #4
 80067de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e2:	e07a      	b.n	80068da <UART_SetConfig+0x2fe>
 80067e4:	2308      	movs	r3, #8
 80067e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ea:	e076      	b.n	80068da <UART_SetConfig+0x2fe>
 80067ec:	2310      	movs	r3, #16
 80067ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067f2:	e072      	b.n	80068da <UART_SetConfig+0x2fe>
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a35      	ldr	r2, [pc, #212]	@ (80068d0 <UART_SetConfig+0x2f4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d12a      	bne.n	8006854 <UART_SetConfig+0x278>
 80067fe:	4b30      	ldr	r3, [pc, #192]	@ (80068c0 <UART_SetConfig+0x2e4>)
 8006800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006804:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006808:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800680c:	d01a      	beq.n	8006844 <UART_SetConfig+0x268>
 800680e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006812:	d81b      	bhi.n	800684c <UART_SetConfig+0x270>
 8006814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006818:	d00c      	beq.n	8006834 <UART_SetConfig+0x258>
 800681a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800681e:	d815      	bhi.n	800684c <UART_SetConfig+0x270>
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <UART_SetConfig+0x250>
 8006824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006828:	d008      	beq.n	800683c <UART_SetConfig+0x260>
 800682a:	e00f      	b.n	800684c <UART_SetConfig+0x270>
 800682c:	2300      	movs	r3, #0
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006832:	e052      	b.n	80068da <UART_SetConfig+0x2fe>
 8006834:	2302      	movs	r3, #2
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800683a:	e04e      	b.n	80068da <UART_SetConfig+0x2fe>
 800683c:	2304      	movs	r3, #4
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006842:	e04a      	b.n	80068da <UART_SetConfig+0x2fe>
 8006844:	2308      	movs	r3, #8
 8006846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684a:	e046      	b.n	80068da <UART_SetConfig+0x2fe>
 800684c:	2310      	movs	r3, #16
 800684e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006852:	e042      	b.n	80068da <UART_SetConfig+0x2fe>
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a17      	ldr	r2, [pc, #92]	@ (80068b8 <UART_SetConfig+0x2dc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d13a      	bne.n	80068d4 <UART_SetConfig+0x2f8>
 800685e:	4b18      	ldr	r3, [pc, #96]	@ (80068c0 <UART_SetConfig+0x2e4>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006864:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006868:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800686c:	d01a      	beq.n	80068a4 <UART_SetConfig+0x2c8>
 800686e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006872:	d81b      	bhi.n	80068ac <UART_SetConfig+0x2d0>
 8006874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006878:	d00c      	beq.n	8006894 <UART_SetConfig+0x2b8>
 800687a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800687e:	d815      	bhi.n	80068ac <UART_SetConfig+0x2d0>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <UART_SetConfig+0x2b0>
 8006884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006888:	d008      	beq.n	800689c <UART_SetConfig+0x2c0>
 800688a:	e00f      	b.n	80068ac <UART_SetConfig+0x2d0>
 800688c:	2300      	movs	r3, #0
 800688e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006892:	e022      	b.n	80068da <UART_SetConfig+0x2fe>
 8006894:	2302      	movs	r3, #2
 8006896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800689a:	e01e      	b.n	80068da <UART_SetConfig+0x2fe>
 800689c:	2304      	movs	r3, #4
 800689e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a2:	e01a      	b.n	80068da <UART_SetConfig+0x2fe>
 80068a4:	2308      	movs	r3, #8
 80068a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068aa:	e016      	b.n	80068da <UART_SetConfig+0x2fe>
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068b2:	e012      	b.n	80068da <UART_SetConfig+0x2fe>
 80068b4:	cfff69f3 	.word	0xcfff69f3
 80068b8:	40008000 	.word	0x40008000
 80068bc:	40013800 	.word	0x40013800
 80068c0:	40021000 	.word	0x40021000
 80068c4:	40004400 	.word	0x40004400
 80068c8:	40004800 	.word	0x40004800
 80068cc:	40004c00 	.word	0x40004c00
 80068d0:	40005000 	.word	0x40005000
 80068d4:	2310      	movs	r3, #16
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4aae      	ldr	r2, [pc, #696]	@ (8006b98 <UART_SetConfig+0x5bc>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	f040 8097 	bne.w	8006a14 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d823      	bhi.n	8006936 <UART_SetConfig+0x35a>
 80068ee:	a201      	add	r2, pc, #4	@ (adr r2, 80068f4 <UART_SetConfig+0x318>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006919 	.word	0x08006919
 80068f8:	08006937 	.word	0x08006937
 80068fc:	08006921 	.word	0x08006921
 8006900:	08006937 	.word	0x08006937
 8006904:	08006927 	.word	0x08006927
 8006908:	08006937 	.word	0x08006937
 800690c:	08006937 	.word	0x08006937
 8006910:	08006937 	.word	0x08006937
 8006914:	0800692f 	.word	0x0800692f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006918:	f7fc fb82 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 800691c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800691e:	e010      	b.n	8006942 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006920:	4b9e      	ldr	r3, [pc, #632]	@ (8006b9c <UART_SetConfig+0x5c0>)
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006924:	e00d      	b.n	8006942 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006926:	f7fc fae5 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 800692a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800692c:	e009      	b.n	8006942 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006932:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006934:	e005      	b.n	8006942 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006940:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8130 	beq.w	8006baa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	4a94      	ldr	r2, [pc, #592]	@ (8006ba0 <UART_SetConfig+0x5c4>)
 8006950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006954:	461a      	mov	r2, r3
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	fbb3 f3f2 	udiv	r3, r3, r2
 800695c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	4413      	add	r3, r2
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	429a      	cmp	r2, r3
 800696c:	d305      	bcc.n	800697a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	429a      	cmp	r2, r3
 8006978:	d903      	bls.n	8006982 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006980:	e113      	b.n	8006baa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	2200      	movs	r2, #0
 8006986:	60bb      	str	r3, [r7, #8]
 8006988:	60fa      	str	r2, [r7, #12]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	4a84      	ldr	r2, [pc, #528]	@ (8006ba0 <UART_SetConfig+0x5c4>)
 8006990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006994:	b29b      	uxth	r3, r3
 8006996:	2200      	movs	r2, #0
 8006998:	603b      	str	r3, [r7, #0]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069a4:	f7f9 fc2a 	bl	80001fc <__aeabi_uldivmod>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4610      	mov	r0, r2
 80069ae:	4619      	mov	r1, r3
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	020b      	lsls	r3, r1, #8
 80069ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069be:	0202      	lsls	r2, r0, #8
 80069c0:	6979      	ldr	r1, [r7, #20]
 80069c2:	6849      	ldr	r1, [r1, #4]
 80069c4:	0849      	lsrs	r1, r1, #1
 80069c6:	2000      	movs	r0, #0
 80069c8:	460c      	mov	r4, r1
 80069ca:	4605      	mov	r5, r0
 80069cc:	eb12 0804 	adds.w	r8, r2, r4
 80069d0:	eb43 0905 	adc.w	r9, r3, r5
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	469a      	mov	sl, r3
 80069dc:	4693      	mov	fp, r2
 80069de:	4652      	mov	r2, sl
 80069e0:	465b      	mov	r3, fp
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	f7f9 fc09 	bl	80001fc <__aeabi_uldivmod>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4613      	mov	r3, r2
 80069f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069f8:	d308      	bcc.n	8006a0c <UART_SetConfig+0x430>
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a00:	d204      	bcs.n	8006a0c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6a3a      	ldr	r2, [r7, #32]
 8006a08:	60da      	str	r2, [r3, #12]
 8006a0a:	e0ce      	b.n	8006baa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a12:	e0ca      	b.n	8006baa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a1c:	d166      	bne.n	8006aec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a22:	2b08      	cmp	r3, #8
 8006a24:	d827      	bhi.n	8006a76 <UART_SetConfig+0x49a>
 8006a26:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <UART_SetConfig+0x450>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a51 	.word	0x08006a51
 8006a30:	08006a59 	.word	0x08006a59
 8006a34:	08006a61 	.word	0x08006a61
 8006a38:	08006a77 	.word	0x08006a77
 8006a3c:	08006a67 	.word	0x08006a67
 8006a40:	08006a77 	.word	0x08006a77
 8006a44:	08006a77 	.word	0x08006a77
 8006a48:	08006a77 	.word	0x08006a77
 8006a4c:	08006a6f 	.word	0x08006a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a50:	f7fc fae6 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 8006a54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a56:	e014      	b.n	8006a82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a58:	f7fc faf8 	bl	800304c <HAL_RCC_GetPCLK2Freq>
 8006a5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a5e:	e010      	b.n	8006a82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a60:	4b4e      	ldr	r3, [pc, #312]	@ (8006b9c <UART_SetConfig+0x5c0>)
 8006a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a64:	e00d      	b.n	8006a82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a66:	f7fc fa45 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8006a6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a6c:	e009      	b.n	8006a82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a74:	e005      	b.n	8006a82 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8090 	beq.w	8006baa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8e:	4a44      	ldr	r2, [pc, #272]	@ (8006ba0 <UART_SetConfig+0x5c4>)
 8006a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a94:	461a      	mov	r2, r3
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a9c:	005a      	lsls	r2, r3, #1
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	441a      	add	r2, r3
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	2b0f      	cmp	r3, #15
 8006ab4:	d916      	bls.n	8006ae4 <UART_SetConfig+0x508>
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006abc:	d212      	bcs.n	8006ae4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f023 030f 	bic.w	r3, r3, #15
 8006ac6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	8bfb      	ldrh	r3, [r7, #30]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	8bfa      	ldrh	r2, [r7, #30]
 8006ae0:	60da      	str	r2, [r3, #12]
 8006ae2:	e062      	b.n	8006baa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006aea:	e05e      	b.n	8006baa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d828      	bhi.n	8006b46 <UART_SetConfig+0x56a>
 8006af4:	a201      	add	r2, pc, #4	@ (adr r2, 8006afc <UART_SetConfig+0x520>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b29 	.word	0x08006b29
 8006b04:	08006b31 	.word	0x08006b31
 8006b08:	08006b47 	.word	0x08006b47
 8006b0c:	08006b37 	.word	0x08006b37
 8006b10:	08006b47 	.word	0x08006b47
 8006b14:	08006b47 	.word	0x08006b47
 8006b18:	08006b47 	.word	0x08006b47
 8006b1c:	08006b3f 	.word	0x08006b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b20:	f7fc fa7e 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 8006b24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b26:	e014      	b.n	8006b52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b28:	f7fc fa90 	bl	800304c <HAL_RCC_GetPCLK2Freq>
 8006b2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b2e:	e010      	b.n	8006b52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b30:	4b1a      	ldr	r3, [pc, #104]	@ (8006b9c <UART_SetConfig+0x5c0>)
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b34:	e00d      	b.n	8006b52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b36:	f7fc f9dd 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8006b3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b3c:	e009      	b.n	8006b52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b44:	e005      	b.n	8006b52 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b50:	bf00      	nop
    }

    if (pclk != 0U)
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d028      	beq.n	8006baa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5c:	4a10      	ldr	r2, [pc, #64]	@ (8006ba0 <UART_SetConfig+0x5c4>)
 8006b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b62:	461a      	mov	r2, r3
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	441a      	add	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	2b0f      	cmp	r3, #15
 8006b80:	d910      	bls.n	8006ba4 <UART_SetConfig+0x5c8>
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b88:	d20c      	bcs.n	8006ba4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60da      	str	r2, [r3, #12]
 8006b94:	e009      	b.n	8006baa <UART_SetConfig+0x5ce>
 8006b96:	bf00      	nop
 8006b98:	40008000 	.word	0x40008000
 8006b9c:	00f42400 	.word	0x00f42400
 8006ba0:	080084b0 	.word	0x080084b0
      }
      else
      {
        ret = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006bc6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3730      	adds	r7, #48	@ 0x30
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d01a      	beq.n	8006cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cd2:	d10a      	bne.n	8006cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	605a      	str	r2, [r3, #4]
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b098      	sub	sp, #96	@ 0x60
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d28:	f7fa fd86 	bl	8001838 <HAL_GetTick>
 8006d2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0308 	and.w	r3, r3, #8
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d12f      	bne.n	8006d9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d44:	2200      	movs	r2, #0
 8006d46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f88e 	bl	8006e6c <UART_WaitOnFlagUntilTimeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d022      	beq.n	8006d9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e6      	bne.n	8006d56 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e063      	b.n	8006e64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d149      	bne.n	8006e3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006daa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db2:	2200      	movs	r2, #0
 8006db4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f857 	bl	8006e6c <UART_WaitOnFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d03c      	beq.n	8006e3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e6      	bne.n	8006dc4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f023 0301 	bic.w	r3, r3, #1
 8006e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3308      	adds	r3, #8
 8006e14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e16:	61fa      	str	r2, [r7, #28]
 8006e18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	69b9      	ldr	r1, [r7, #24]
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	617b      	str	r3, [r7, #20]
   return(result);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e5      	bne.n	8006df6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e012      	b.n	8006e64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3758      	adds	r7, #88	@ 0x58
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e7c:	e04f      	b.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e84:	d04b      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e86:	f7fa fcd7 	bl	8001838 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d302      	bcc.n	8006e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e04e      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d037      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b80      	cmp	r3, #128	@ 0x80
 8006eb2:	d034      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b40      	cmp	r3, #64	@ 0x40
 8006eb8:	d031      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d110      	bne.n	8006eea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f838 	bl	8006f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2208      	movs	r2, #8
 8006eda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e029      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ef8:	d111      	bne.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f81e 	bl	8006f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e00f      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69da      	ldr	r2, [r3, #28]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	4013      	ands	r3, r2
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	bf0c      	ite	eq
 8006f2e:	2301      	moveq	r3, #1
 8006f30:	2300      	movne	r3, #0
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	461a      	mov	r2, r3
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d0a0      	beq.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b095      	sub	sp, #84	@ 0x54
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e6      	bne.n	8006f4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3308      	adds	r3, #8
 8006f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e3      	bne.n	8006f80 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d118      	bne.n	8006ff2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f023 0310 	bic.w	r3, r3, #16
 8006fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fde:	61bb      	str	r3, [r7, #24]
 8006fe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6979      	ldr	r1, [r7, #20]
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	613b      	str	r3, [r7, #16]
   return(result);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e6      	bne.n	8006fc0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007006:	bf00      	nop
 8007008:	3754      	adds	r7, #84	@ 0x54
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_UARTEx_DisableFifoMode+0x16>
 8007024:	2302      	movs	r3, #2
 8007026:	e027      	b.n	8007078 <HAL_UARTEx_DisableFifoMode+0x66>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2224      	movs	r2, #36	@ 0x24
 8007034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0201 	bic.w	r2, r2, #1
 800704e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007056:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007098:	2302      	movs	r3, #2
 800709a:	e02d      	b.n	80070f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2224      	movs	r2, #36	@ 0x24
 80070a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f84f 	bl	800717c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007114:	2302      	movs	r3, #2
 8007116:	e02d      	b.n	8007174 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2224      	movs	r2, #36	@ 0x24
 8007124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0201 	bic.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f811 	bl	800717c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007188:	2b00      	cmp	r3, #0
 800718a:	d108      	bne.n	800719e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800719c:	e031      	b.n	8007202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800719e:	2308      	movs	r3, #8
 80071a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071a2:	2308      	movs	r3, #8
 80071a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	0e5b      	lsrs	r3, r3, #25
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	f003 0307 	and.w	r3, r3, #7
 80071b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	0f5b      	lsrs	r3, r3, #29
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	7b3a      	ldrb	r2, [r7, #12]
 80071ca:	4911      	ldr	r1, [pc, #68]	@ (8007210 <UARTEx_SetNbDataToProcess+0x94>)
 80071cc:	5c8a      	ldrb	r2, [r1, r2]
 80071ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071d2:	7b3a      	ldrb	r2, [r7, #12]
 80071d4:	490f      	ldr	r1, [pc, #60]	@ (8007214 <UARTEx_SetNbDataToProcess+0x98>)
 80071d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80071dc:	b29a      	uxth	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	7b7a      	ldrb	r2, [r7, #13]
 80071e8:	4909      	ldr	r1, [pc, #36]	@ (8007210 <UARTEx_SetNbDataToProcess+0x94>)
 80071ea:	5c8a      	ldrb	r2, [r1, r2]
 80071ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80071f0:	7b7a      	ldrb	r2, [r7, #13]
 80071f2:	4908      	ldr	r1, [pc, #32]	@ (8007214 <UARTEx_SetNbDataToProcess+0x98>)
 80071f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007202:	bf00      	nop
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	080084c8 	.word	0x080084c8
 8007214:	080084d0 	.word	0x080084d0

08007218 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	6812      	ldr	r2, [r2, #0]
 8007230:	f023 0101 	bic.w	r1, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2b08      	cmp	r3, #8
 8007240:	d102      	bne.n	8007248 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007242:	2340      	movs	r3, #64	@ 0x40
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e001      	b.n	800724c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007258:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800725e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007264:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800726a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007270:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8007276:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800727c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 8007282:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 8007288:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800728e:	4313      	orrs	r3, r2
 8007290:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80072ba:	4b23      	ldr	r3, [pc, #140]	@ (8007348 <FMC_NORSRAM_Init+0x130>)
 80072bc:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072c4:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072cc:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80072d4:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80072dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	43db      	mvns	r3, r3
 80072ec:	ea02 0103 	and.w	r1, r2, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	4319      	orrs	r1, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007306:	d10c      	bne.n	8007322 <FMC_NORSRAM_Init+0x10a>
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d008      	beq.n	8007322 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d006      	beq.n	8007338 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	371c      	adds	r7, #28
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	0008fb7f 	.word	0x0008fb7f

0800734c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8007362:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800736a:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8007372:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800737a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	3b01      	subs	r3, #1
 8007382:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8007384:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	3b02      	subs	r3, #2
 800738c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800738e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800739a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ae:	d113      	bne.n	80073d8 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80073b8:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	3b01      	subs	r3, #1
 80073c0:	051b      	lsls	r3, r3, #20
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	607a      	str	r2, [r7, #4]
 80073f2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073fa:	d121      	bne.n	8007440 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007404:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	6819      	ldr	r1, [r3, #0]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	4319      	orrs	r1, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	4319      	orrs	r1, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	079b      	lsls	r3, r3, #30
 8007422:	4319      	orrs	r1, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	4319      	orrs	r1, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	041b      	lsls	r3, r3, #16
 8007430:	430b      	orrs	r3, r1
 8007432:	ea42 0103 	orr.w	r1, r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800743e:	e005      	b.n	800744c <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8007448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
	...

0800745c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800745c:	b084      	sub	sp, #16
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	f107 001c 	add.w	r0, r7, #28
 800746a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007472:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007474:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007476:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      |\
 800747a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             |\
 800747e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl |\
 8007482:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	4b07      	ldr	r3, [pc, #28]	@ (80074ac <SDMMC_Init+0x50>)
 8007490:	4013      	ands	r3, r2
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	b004      	add	sp, #16
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	ffc02c00 	.word	0xffc02c00

080074b0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f043 0203 	orr.w	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80074de:	2002      	movs	r0, #2
 80074e0:	f7fa f9b6 	bl	8001850 <HAL_Delay>

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0303 	and.w	r3, r3, #3
}
 80074fe:	4618      	mov	r0, r3
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800752a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007530:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007536:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	4b06      	ldr	r3, [pc, #24]	@ (800755c <SDMMC_SendCommand+0x50>)
 8007544:	4013      	ands	r3, r2
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	fffee0c0 	.word	0xfffee0c0

08007560 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	b2db      	uxtb	r3, r3
}
 800756e:	4618      	mov	r0, r3
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800757a:	b480      	push	{r7}
 800757c:	b085      	sub	sp, #20
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3314      	adds	r3, #20
 8007588:	461a      	mov	r2, r3
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	4413      	add	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80075c6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80075cc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80075d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0

}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007606:	2310      	movs	r3, #16
 8007608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800760a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800760e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007610:	2300      	movs	r3, #0
 8007612:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007618:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800761a:	f107 0308 	add.w	r3, r7, #8
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff ff73 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800762a:	2110      	movs	r1, #16
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f9b9 	bl	80079a4 <SDMMC_GetCmdResp1>
 8007632:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007634:	69fb      	ldr	r3, [r7, #28]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3720      	adds	r7, #32
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b08a      	sub	sp, #40	@ 0x28
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800764e:	2307      	movs	r3, #7
 8007650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007652:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007656:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007658:	2300      	movs	r3, #0
 800765a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800765c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007660:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007662:	f107 0310 	add.w	r3, r7, #16
 8007666:	4619      	mov	r1, r3
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f7ff ff4f 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800766e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007672:	2107      	movs	r1, #7
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 f995 	bl	80079a4 <SDMMC_GetCmdResp1>
 800767a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800767e:	4618      	mov	r0, r3
 8007680:	3728      	adds	r7, #40	@ 0x28
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b088      	sub	sp, #32
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800769e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80076a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076a4:	f107 0308 	add.w	r3, r7, #8
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff ff2e 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fbb9 	bl	8007e28 <SDMMC_GetCmdError>
 80076b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076b8:	69fb      	ldr	r3, [r7, #28]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3720      	adds	r7, #32
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b088      	sub	sp, #32
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80076ca:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80076ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80076d0:	2308      	movs	r3, #8
 80076d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80076d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80076e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076e4:	f107 0308 	add.w	r3, r7, #8
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff ff0e 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fb4b 	bl	8007d8c <SDMMC_GetCmdResp7>
 80076f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076f8:	69fb      	ldr	r3, [r7, #28]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3720      	adds	r7, #32
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b088      	sub	sp, #32
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007710:	2337      	movs	r3, #55	@ 0x37
 8007712:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007714:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800771e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007722:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007724:	f107 0308 	add.w	r3, r7, #8
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff feee 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007734:	2137      	movs	r1, #55	@ 0x37
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f934 	bl	80079a4 <SDMMC_GetCmdResp1>
 800773c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800773e:	69fb      	ldr	r3, [r7, #28]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3720      	adds	r7, #32
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007756:	2329      	movs	r3, #41	@ 0x29
 8007758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800775a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800775e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007760:	2300      	movs	r3, #0
 8007762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007768:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800776a:	f107 0308 	add.w	r3, r7, #8
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff fecb 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa50 	bl	8007c1c <SDMMC_GetCmdResp3>
 800777c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800777e:	69fb      	ldr	r3, [r7, #28]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3720      	adds	r7, #32
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007796:	2306      	movs	r3, #6
 8007798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800779a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800779e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077aa:	f107 0308 	add.w	r3, r7, #8
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff feab 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80077b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077ba:	2106      	movs	r1, #6
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f8f1 	bl	80079a4 <SDMMC_GetCmdResp1>
 80077c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077c4:	69fb      	ldr	r3, [r7, #28]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3720      	adds	r7, #32
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b088      	sub	sp, #32
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80077da:	2333      	movs	r3, #51	@ 0x33
 80077dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80077e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077ee:	f107 0308 	add.w	r3, r7, #8
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff fe89 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80077fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077fe:	2133      	movs	r1, #51	@ 0x33
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f8cf 	bl	80079a4 <SDMMC_GetCmdResp1>
 8007806:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007808:	69fb      	ldr	r3, [r7, #28]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b088      	sub	sp, #32
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800781e:	2302      	movs	r3, #2
 8007820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007822:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800782c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007830:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007832:	f107 0308 	add.w	r3, r7, #8
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff fe67 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f9a2 	bl	8007b88 <SDMMC_GetCmdResp2>
 8007844:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007846:	69fb      	ldr	r3, [r7, #28]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3720      	adds	r7, #32
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800785e:	2309      	movs	r3, #9
 8007860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007862:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007868:	2300      	movs	r3, #0
 800786a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800786c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007870:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007872:	f107 0308 	add.w	r3, r7, #8
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff fe47 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f982 	bl	8007b88 <SDMMC_GetCmdResp2>
 8007884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007886:	69fb      	ldr	r3, [r7, #28]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3720      	adds	r7, #32
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800789e:	2303      	movs	r3, #3
 80078a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80078a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078a8:	2300      	movs	r3, #0
 80078aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078b2:	f107 0308 	add.w	r3, r7, #8
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff fe27 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	2103      	movs	r1, #3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9ea 	bl	8007c9c <SDMMC_GetCmdResp6>
 80078c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078ca:	69fb      	ldr	r3, [r7, #28]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3720      	adds	r7, #32
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80078e2:	230d      	movs	r3, #13
 80078e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80078ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078ec:	2300      	movs	r3, #0
 80078ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078f6:	f107 0308 	add.w	r3, r7, #8
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff fe05 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007906:	210d      	movs	r1, #13
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f84b 	bl	80079a4 <SDMMC_GetCmdResp1>
 800790e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007910:	69fb      	ldr	r3, [r7, #28]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3720      	adds	r7, #32
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b088      	sub	sp, #32
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007926:	230d      	movs	r3, #13
 8007928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800792a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800792e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007938:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800793a:	f107 0308 	add.w	r3, r7, #8
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff fde3 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800794a:	210d      	movs	r1, #13
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f829 	bl	80079a4 <SDMMC_GetCmdResp1>
 8007952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007954:	69fb      	ldr	r3, [r7, #28]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b088      	sub	sp, #32
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8007966:	2300      	movs	r3, #0
 8007968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800796a:	230b      	movs	r3, #11
 800796c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800796e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007974:	2300      	movs	r3, #0
 8007976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800797c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800797e:	f107 0308 	add.w	r3, r7, #8
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff fdc1 	bl	800750c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800798a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800798e:	210b      	movs	r1, #11
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f807 	bl	80079a4 <SDMMC_GetCmdResp1>
 8007996:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007998:	69fb      	ldr	r3, [r7, #28]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3720      	adds	r7, #32
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b088      	sub	sp, #32
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	460b      	mov	r3, r1
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80079b2:	4b70      	ldr	r3, [pc, #448]	@ (8007b74 <SDMMC_GetCmdResp1+0x1d0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a70      	ldr	r2, [pc, #448]	@ (8007b78 <SDMMC_GetCmdResp1+0x1d4>)
 80079b8:	fba2 2303 	umull	r2, r3, r2, r3
 80079bc:	0a5a      	lsrs	r2, r3, #9
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	fb02 f303 	mul.w	r3, r2, r3
 80079c4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	1e5a      	subs	r2, r3, #1
 80079ca:	61fa      	str	r2, [r7, #28]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d102      	bne.n	80079d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80079d4:	e0c9      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079da:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	4b67      	ldr	r3, [pc, #412]	@ (8007b7c <SDMMC_GetCmdResp1+0x1d8>)
 80079e0:	4013      	ands	r3, r2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0ef      	beq.n	80079c6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1ea      	bne.n	80079c6 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d004      	beq.n	8007a06 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2204      	movs	r2, #4
 8007a00:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a02:	2304      	movs	r3, #4
 8007a04:	e0b1      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2201      	movs	r2, #1
 8007a16:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e0a6      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4a58      	ldr	r2, [pc, #352]	@ (8007b80 <SDMMC_GetCmdResp1+0x1dc>)
 8007a20:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f7ff fd9c 	bl	8007560 <SDMMC_GetCommandResponse>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	7afb      	ldrb	r3, [r7, #11]
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d001      	beq.n	8007a36 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e099      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007a36:	2100      	movs	r1, #0
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f7ff fd9e 	bl	800757a <SDMMC_GetResponse>
 8007a3e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4b50      	ldr	r3, [pc, #320]	@ (8007b84 <SDMMC_GetCmdResp1+0x1e0>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e08d      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	da02      	bge.n	8007a5a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007a54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a58:	e087      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007a64:	2340      	movs	r3, #64	@ 0x40
 8007a66:	e080      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007a72:	2380      	movs	r3, #128	@ 0x80
 8007a74:	e079      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a84:	e071      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007a90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a94:	e069      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007aa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007aa4:	e061      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007ab0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ab4:	e059      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ac0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ac4:	e051      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007ad0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007ad4:	e049      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ae0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007ae4:	e041      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007af0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007af4:	e039      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007b00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007b04:	e031      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007b10:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007b14:	e029      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007b20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007b24:	e021      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007b30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007b34:	e019      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007b40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007b44:	e011      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007b50:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007b54:	e009      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f003 0308 	and.w	r3, r3, #8
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007b60:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007b64:	e001      	b.n	8007b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3720      	adds	r7, #32
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20000000 	.word	0x20000000
 8007b78:	10624dd3 	.word	0x10624dd3
 8007b7c:	00200045 	.word	0x00200045
 8007b80:	002000c5 	.word	0x002000c5
 8007b84:	fdffe008 	.word	0xfdffe008

08007b88 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b90:	4b1f      	ldr	r3, [pc, #124]	@ (8007c10 <SDMMC_GetCmdResp2+0x88>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a1f      	ldr	r2, [pc, #124]	@ (8007c14 <SDMMC_GetCmdResp2+0x8c>)
 8007b96:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9a:	0a5b      	lsrs	r3, r3, #9
 8007b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ba0:	fb02 f303 	mul.w	r3, r2, r3
 8007ba4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1e5a      	subs	r2, r3, #1
 8007baa:	60fa      	str	r2, [r7, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d102      	bne.n	8007bb6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007bb4:	e026      	b.n	8007c04 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0ef      	beq.n	8007ba6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1ea      	bne.n	8007ba6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d004      	beq.n	8007be6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2204      	movs	r2, #4
 8007be0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007be2:	2304      	movs	r3, #4
 8007be4:	e00e      	b.n	8007c04 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e003      	b.n	8007c04 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a06      	ldr	r2, [pc, #24]	@ (8007c18 <SDMMC_GetCmdResp2+0x90>)
 8007c00:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	20000000 	.word	0x20000000
 8007c14:	10624dd3 	.word	0x10624dd3
 8007c18:	002000c5 	.word	0x002000c5

08007c1c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c24:	4b1a      	ldr	r3, [pc, #104]	@ (8007c90 <SDMMC_GetCmdResp3+0x74>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a1a      	ldr	r2, [pc, #104]	@ (8007c94 <SDMMC_GetCmdResp3+0x78>)
 8007c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2e:	0a5b      	lsrs	r3, r3, #9
 8007c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c34:	fb02 f303 	mul.w	r3, r2, r3
 8007c38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	1e5a      	subs	r2, r3, #1
 8007c3e:	60fa      	str	r2, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007c48:	e01b      	b.n	8007c82 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0ef      	beq.n	8007c3a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1ea      	bne.n	8007c3a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d004      	beq.n	8007c7a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2204      	movs	r2, #4
 8007c74:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c76:	2304      	movs	r3, #4
 8007c78:	e003      	b.n	8007c82 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a06      	ldr	r2, [pc, #24]	@ (8007c98 <SDMMC_GetCmdResp3+0x7c>)
 8007c7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20000000 	.word	0x20000000
 8007c94:	10624dd3 	.word	0x10624dd3
 8007c98:	002000c5 	.word	0x002000c5

08007c9c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007caa:	4b35      	ldr	r3, [pc, #212]	@ (8007d80 <SDMMC_GetCmdResp6+0xe4>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a35      	ldr	r2, [pc, #212]	@ (8007d84 <SDMMC_GetCmdResp6+0xe8>)
 8007cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb4:	0a5b      	lsrs	r3, r3, #9
 8007cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cba:	fb02 f303 	mul.w	r3, r2, r3
 8007cbe:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	1e5a      	subs	r2, r3, #1
 8007cc4:	61fa      	str	r2, [r7, #28]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d102      	bne.n	8007cd0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007cce:	e052      	b.n	8007d76 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0ef      	beq.n	8007cc0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1ea      	bne.n	8007cc0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2204      	movs	r2, #4
 8007cfa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	e03a      	b.n	8007d76 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d004      	beq.n	8007d16 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e02f      	b.n	8007d76 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff fc22 	bl	8007560 <SDMMC_GetCommandResponse>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	461a      	mov	r2, r3
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d001      	beq.n	8007d2a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e025      	b.n	8007d76 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4a16      	ldr	r2, [pc, #88]	@ (8007d88 <SDMMC_GetCmdResp6+0xec>)
 8007d2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007d30:	2100      	movs	r1, #0
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f7ff fc21 	bl	800757a <SDMMC_GetResponse>
 8007d38:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d106      	bne.n	8007d52 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	0c1b      	lsrs	r3, r3, #16
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e011      	b.n	8007d76 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007d5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007d60:	e009      	b.n	8007d76 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007d70:	e001      	b.n	8007d76 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3720      	adds	r7, #32
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000000 	.word	0x20000000
 8007d84:	10624dd3 	.word	0x10624dd3
 8007d88:	002000c5 	.word	0x002000c5

08007d8c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d94:	4b22      	ldr	r3, [pc, #136]	@ (8007e20 <SDMMC_GetCmdResp7+0x94>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a22      	ldr	r2, [pc, #136]	@ (8007e24 <SDMMC_GetCmdResp7+0x98>)
 8007d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9e:	0a5b      	lsrs	r3, r3, #9
 8007da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007da4:	fb02 f303 	mul.w	r3, r2, r3
 8007da8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	1e5a      	subs	r2, r3, #1
 8007dae:	60fa      	str	r2, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d102      	bne.n	8007dba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007db4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007db8:	e02c      	b.n	8007e14 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0ef      	beq.n	8007daa <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1ea      	bne.n	8007daa <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2204      	movs	r2, #4
 8007de4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007de6:	2304      	movs	r3, #4
 8007de8:	e014      	b.n	8007e14 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d004      	beq.n	8007e00 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e009      	b.n	8007e14 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2240      	movs	r2, #64	@ 0x40
 8007e10:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007e12:	2300      	movs	r3, #0

}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20000000 	.word	0x20000000
 8007e24:	10624dd3 	.word	0x10624dd3

08007e28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e30:	4b11      	ldr	r3, [pc, #68]	@ (8007e78 <SDMMC_GetCmdError+0x50>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a11      	ldr	r2, [pc, #68]	@ (8007e7c <SDMMC_GetCmdError+0x54>)
 8007e36:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3a:	0a5b      	lsrs	r3, r3, #9
 8007e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e40:	fb02 f303 	mul.w	r3, r2, r3
 8007e44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	1e5a      	subs	r2, r3, #1
 8007e4a:	60fa      	str	r2, [r7, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d102      	bne.n	8007e56 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007e54:	e009      	b.n	8007e6a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0f1      	beq.n	8007e46 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a06      	ldr	r2, [pc, #24]	@ (8007e80 <SDMMC_GetCmdError+0x58>)
 8007e66:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	20000000 	.word	0x20000000
 8007e7c:	10624dd3 	.word	0x10624dd3
 8007e80:	002000c5 	.word	0x002000c5

08007e84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e84:	b084      	sub	sp, #16
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	f107 001c 	add.w	r0, r7, #28
 8007e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa68 	bl	8008378 <USB_CoreReset>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007eac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d106      	bne.n	8007ec2 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	639a      	str	r2, [r3, #56]	@ 0x38
 8007ec0:	e005      	b.n	8007ece <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007eda:	b004      	add	sp, #16
 8007edc:	4770      	bx	lr

08007ede <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f023 0201 	bic.w	r2, r3, #1
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d115      	bne.n	8007f4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f2e:	200a      	movs	r0, #10
 8007f30:	f7f9 fc8e 	bl	8001850 <HAL_Delay>
      ms += 10U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	330a      	adds	r3, #10
 8007f38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fa0e 	bl	800835c <USB_GetMode>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d01e      	beq.n	8007f84 <USB_SetCurrentMode+0x84>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f4a:	d9f0      	bls.n	8007f2e <USB_SetCurrentMode+0x2e>
 8007f4c:	e01a      	b.n	8007f84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f4e:	78fb      	ldrb	r3, [r7, #3]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d115      	bne.n	8007f80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f60:	200a      	movs	r0, #10
 8007f62:	f7f9 fc75 	bl	8001850 <HAL_Delay>
      ms += 10U;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	330a      	adds	r3, #10
 8007f6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f9f5 	bl	800835c <USB_GetMode>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d005      	beq.n	8007f84 <USB_SetCurrentMode+0x84>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f7c:	d9f0      	bls.n	8007f60 <USB_SetCurrentMode+0x60>
 8007f7e:	e001      	b.n	8007f84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e005      	b.n	8007f90 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2bc8      	cmp	r3, #200	@ 0xc8
 8007f88:	d101      	bne.n	8007f8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e000      	b.n	8007f90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f98:	b084      	sub	sp, #16
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b086      	sub	sp, #24
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	613b      	str	r3, [r7, #16]
 8007fb6:	e009      	b.n	8007fcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	3340      	adds	r3, #64	@ 0x40
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	613b      	str	r3, [r7, #16]
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	2b0e      	cmp	r3, #14
 8007fd0:	d9f2      	bls.n	8007fb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007fd2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d11c      	bne.n	8008014 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fe8:	f043 0302 	orr.w	r3, r3, #2
 8007fec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	e005      	b.n	8008020 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008018:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008026:	461a      	mov	r2, r3
 8008028:	2300      	movs	r3, #0
 800802a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800802c:	2103      	movs	r1, #3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f95a 	bl	80082e8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008034:	2110      	movs	r1, #16
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f8f6 	bl	8008228 <USB_FlushTxFifo>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f920 	bl	800828c <USB_FlushRxFifo>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800805c:	461a      	mov	r2, r3
 800805e:	2300      	movs	r3, #0
 8008060:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008068:	461a      	mov	r2, r3
 800806a:	2300      	movs	r3, #0
 800806c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008074:	461a      	mov	r2, r3
 8008076:	2300      	movs	r3, #0
 8008078:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800807a:	2300      	movs	r3, #0
 800807c:	613b      	str	r3, [r7, #16]
 800807e:	e043      	b.n	8008108 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008092:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008096:	d118      	bne.n	80080ca <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080aa:	461a      	mov	r2, r3
 80080ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80080b0:	6013      	str	r3, [r2, #0]
 80080b2:	e013      	b.n	80080dc <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080c0:	461a      	mov	r2, r3
 80080c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	e008      	b.n	80080dc <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d6:	461a      	mov	r2, r3
 80080d8:	2300      	movs	r3, #0
 80080da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080e8:	461a      	mov	r2, r3
 80080ea:	2300      	movs	r3, #0
 80080ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080fa:	461a      	mov	r2, r3
 80080fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008100:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	3301      	adds	r3, #1
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800810c:	461a      	mov	r2, r3
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	4293      	cmp	r3, r2
 8008112:	d3b5      	bcc.n	8008080 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008114:	2300      	movs	r3, #0
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	e043      	b.n	80081a2 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800812c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008130:	d118      	bne.n	8008164 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10a      	bne.n	800814e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008144:	461a      	mov	r2, r3
 8008146:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	e013      	b.n	8008176 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815a:	461a      	mov	r2, r3
 800815c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	e008      	b.n	8008176 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008170:	461a      	mov	r2, r3
 8008172:	2300      	movs	r3, #0
 8008174:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008182:	461a      	mov	r2, r3
 8008184:	2300      	movs	r3, #0
 8008186:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008194:	461a      	mov	r2, r3
 8008196:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800819a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	3301      	adds	r3, #1
 80081a0:	613b      	str	r3, [r7, #16]
 80081a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80081a6:	461a      	mov	r2, r3
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d3b5      	bcc.n	800811a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80081ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f043 0210 	orr.w	r2, r3, #16
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	699a      	ldr	r2, [r3, #24]
 80081e0:	4b10      	ldr	r3, [pc, #64]	@ (8008224 <USB_DevInit+0x28c>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f043 0208 	orr.w	r2, r3, #8
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008200:	2b01      	cmp	r3, #1
 8008202:	d107      	bne.n	8008214 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800820c:	f043 0304 	orr.w	r3, r3, #4
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008220:	b004      	add	sp, #16
 8008222:	4770      	bx	lr
 8008224:	803c3800 	.word	0x803c3800

08008228 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3301      	adds	r3, #1
 800823a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008242:	d901      	bls.n	8008248 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e01b      	b.n	8008280 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	daf2      	bge.n	8008236 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	019b      	lsls	r3, r3, #6
 8008258:	f043 0220 	orr.w	r2, r3, #32
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3301      	adds	r3, #1
 8008264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800826c:	d901      	bls.n	8008272 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e006      	b.n	8008280 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0320 	and.w	r3, r3, #32
 800827a:	2b20      	cmp	r3, #32
 800827c:	d0f0      	beq.n	8008260 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082a4:	d901      	bls.n	80082aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e018      	b.n	80082dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	daf2      	bge.n	8008298 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2210      	movs	r2, #16
 80082ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3301      	adds	r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082c8:	d901      	bls.n	80082ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e006      	b.n	80082dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0310 	and.w	r3, r3, #16
 80082d6:	2b10      	cmp	r3, #16
 80082d8:	d0f0      	beq.n	80082bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	68f9      	ldr	r1, [r7, #12]
 8008304:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008308:	4313      	orrs	r3, r2
 800830a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800831a:	b480      	push	{r7}
 800831c:	b085      	sub	sp, #20
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008334:	f023 0303 	bic.w	r3, r3, #3
 8008338:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008348:	f043 0302 	orr.w	r3, r3, #2
 800834c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	f003 0301 	and.w	r3, r3, #1
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3301      	adds	r3, #1
 8008388:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008390:	d901      	bls.n	8008396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e01b      	b.n	80083ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	daf2      	bge.n	8008384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	f043 0201 	orr.w	r2, r3, #1
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083ba:	d901      	bls.n	80083c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e006      	b.n	80083ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	f003 0301 	and.w	r3, r3, #1
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d0f0      	beq.n	80083ae <USB_CoreReset+0x36>

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 80083da:	b480      	push	{r7}
 80083dc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
    /* USER CODE END 5 */
}
 80083de:	bf00      	nop
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
    /* USER CODE END 6 */
}
 80083ec:	bf00      	nop
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <memset>:
 80083f6:	4402      	add	r2, r0
 80083f8:	4603      	mov	r3, r0
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d100      	bne.n	8008400 <memset+0xa>
 80083fe:	4770      	bx	lr
 8008400:	f803 1b01 	strb.w	r1, [r3], #1
 8008404:	e7f9      	b.n	80083fa <memset+0x4>
	...

08008408 <__libc_init_array>:
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	4d0d      	ldr	r5, [pc, #52]	@ (8008440 <__libc_init_array+0x38>)
 800840c:	4c0d      	ldr	r4, [pc, #52]	@ (8008444 <__libc_init_array+0x3c>)
 800840e:	1b64      	subs	r4, r4, r5
 8008410:	10a4      	asrs	r4, r4, #2
 8008412:	2600      	movs	r6, #0
 8008414:	42a6      	cmp	r6, r4
 8008416:	d109      	bne.n	800842c <__libc_init_array+0x24>
 8008418:	4d0b      	ldr	r5, [pc, #44]	@ (8008448 <__libc_init_array+0x40>)
 800841a:	4c0c      	ldr	r4, [pc, #48]	@ (800844c <__libc_init_array+0x44>)
 800841c:	f000 f818 	bl	8008450 <_init>
 8008420:	1b64      	subs	r4, r4, r5
 8008422:	10a4      	asrs	r4, r4, #2
 8008424:	2600      	movs	r6, #0
 8008426:	42a6      	cmp	r6, r4
 8008428:	d105      	bne.n	8008436 <__libc_init_array+0x2e>
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008430:	4798      	blx	r3
 8008432:	3601      	adds	r6, #1
 8008434:	e7ee      	b.n	8008414 <__libc_init_array+0xc>
 8008436:	f855 3b04 	ldr.w	r3, [r5], #4
 800843a:	4798      	blx	r3
 800843c:	3601      	adds	r6, #1
 800843e:	e7f2      	b.n	8008426 <__libc_init_array+0x1e>
 8008440:	080084e0 	.word	0x080084e0
 8008444:	080084e0 	.word	0x080084e0
 8008448:	080084e0 	.word	0x080084e0
 800844c:	080084e4 	.word	0x080084e4

08008450 <_init>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	bf00      	nop
 8008454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008456:	bc08      	pop	{r3}
 8008458:	469e      	mov	lr, r3
 800845a:	4770      	bx	lr

0800845c <_fini>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr
